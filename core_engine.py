import webbrowser
import os
import ctypes
import re
import threading
import datetime
import time
import wikipedia
from weather_handler import get_weather
from news_handler import get_headlines
from memory_handler import search_notes, print_all_notes, delete_specific_note, clear_all_notes, update_note, load_notes, save_note, read_notes
from utils import _speak_multilang, speak, listen_command, change_brightness, set_volume, selected_language

def process_command(command):
    command = command.lower()

    # üåê Multilingual Trigger Phrases for Alarm
    alarm_phrases = [
        "set alarm for",                            # English
        "‡§Ö‡§≤‡§æ‡§∞‡•ç‡§Æ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",                              # Hindi
        "alarme pour",                              # French
        "alarma para",                              # Spanish
        "wecker f√ºr"                                # German
    ]

    # üåê Multilingual Trigger Phrases for Reminder
    reminder_phrases = [
        "remind me at",                             # English
        "rappelle-moi √†",                           # French
        "recu√©rdame a las",                         # Spanish
        "erinnere mich um"                          # German
    ]

    # üõë Exit Command ‚Äî Multilingual Trigger + Spoken + Printed
    if any(kw in command for kw in [
        "exit", "shutdown", "stop listening", "quit",           # English
        "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã", "‡§¨‡§æ‡§π‡§∞ ‡§®‡§ø‡§ï‡§≤‡•ã",                                 # Hindi
        "arr√™te", "quitte",                                     # French
        "apagar", "salir",                                      # Spanish
        "beenden", "verlassen"                                  # German
    ]):
        print("üëã NOVA: Exiting.")
        _speak_multilang(
            "Shutting down. Goodbye!",
            hi="‡§¨‡§Ç‡§¶ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ!",
            de="Herunterfahren. Auf Wiedersehen!",
            fr="Fermeture. Au revoir!",
            es="Apagando. ¬°Adi√≥s!"
        )
        exit()


    # üåê Web Commands ‚Äî Multilingual Trigger + Response + Print

    # üü• YouTube
    elif any(kw in command for kw in [
        "open youtube", "youtube ‡§ñ‡•ã‡§≤‡•ã", "youtube ‡§ñ‡•ã‡§≤‡§ø‡§è", "ouvre youtube",
        "abre youtube", "√∂ffne youtube"
    ]):
        print("üåê Opening YouTube...")
        _speak_multilang(
            "Opening YouTube.",
            hi="‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§ñ‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§",
            de="YouTube wird ge√∂ffnet.",
            fr="Ouverture de YouTube.",
            es="Abriendo YouTube."
        )
        webbrowser.open("https://www.youtube.com")

    # üü© ChatGPT
    elif any(kw in command for kw in [
        "open chat g p t", "open chatgpt", "chatgpt ‡§ñ‡•ã‡§≤‡•ã", "ouvre chatgpt",
        "abre chatgpt", "√∂ffne chatgpt"
    ]):
        print("üåê Opening ChatGPT...")
        _speak_multilang(
            "Opening ChatGPT.",
            hi="‡§ö‡•à‡§ü‡§ú‡•Ä‡§™‡•Ä‡§ü‡•Ä ‡§ñ‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§",
            de="ChatGPT wird ge√∂ffnet.",
            fr="Ouverture de ChatGPT.",
            es="Abriendo ChatGPT."
        )
        webbrowser.open("https://chat.openai.com")

    # üü¶ Google Search
    elif any(kw in command for kw in [
        "search on google", "google ‡§™‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç", "google ‡§ñ‡•ã‡§ú‡•ã",
        "recherche sur google", "buscar en google", "google durchsuchen"
    ]):
        print("üåê Preparing for Google search...")
        _speak_multilang(
            "What should I search for?",
            hi="‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§ñ‡•ã‡§ú‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?",
            de="Wonach soll ich suchen?",
            fr="Que dois-je rechercher ?",
            es="¬øQu√© debo buscar?"
        )
        for _ in range(2):
            query = listen_command()
            if query:
                print(f"üåê Searching: {query}")
                webbrowser.open(f"https://www.google.com/search?q={query}")
                _speak_multilang(
                    f"Searching Google for {query}.",
                    hi=f"{query} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ó‡•Ç‡§ó‡§≤ ‡§™‡§∞ ‡§ñ‡•ã‡§ú ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§",
                    de=f"Suche Google nach {query}.",
                    fr=f"Recherche de {query} sur Google.",
                    es=f"Buscando {query} en Google."
                )
                return
        print("‚ùå No valid search term detected.")
        _speak_multilang(
            "Sorry, I couldn't understand the search term.",
            hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§ñ‡•ã‡§ú ‡§∂‡§¨‡•ç‡§¶ ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§",
            de="Entschuldigung, ich konnte den Suchbegriff nicht verstehen.",
            fr="D√©sol√©, je n'ai pas compris le terme de recherche.",
            es="Lo siento, no entend√≠ el t√©rmino de b√∫squeda."
        )

    # üü® Play Music
    elif any(kw in command for kw in [
        "play music", "‡§ó‡§æ‡§®‡§æ ‡§ö‡§≤‡§æ‡§ì", "‡§ó‡•Ä‡§§ ‡§¨‡§ú‡§æ‡§ì",
        "jouer de la musique", "reproducir m√∫sica", "musik abspielen"
    ]):
        print("üéµ Asking for music to play...")
        _speak_multilang(
            "What song should I play?",
            hi="‡§Æ‡•à‡§Ç ‡§ï‡•å‡§® ‡§∏‡§æ ‡§ó‡§æ‡§®‡§æ ‡§ö‡§≤‡§æ‡§ä‡§Ç?",
            de="Welches Lied soll ich spielen?",
            fr="Quelle chanson dois-je jouer ?",
            es="¬øQu√© canci√≥n debo reproducir?"
        )
        query = listen_command()
        if query:
            print(f"üéµ Playing on YouTube: {query}")
            webbrowser.open(f"https://www.youtube.com/results?search_query={query}")
            _speak_multilang(
                f"Playing {query} on YouTube.",
                hi=f"‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§™‡§∞ {query} ‡§ö‡§≤‡§æ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§",
                de=f"{query} wird auf YouTube abgespielt.",
                fr=f"Lecture de {query} sur YouTube.",
                es=f"Reproduciendo {query} en YouTube."
            )
        else:
            print("‚ùå No song detected.")
            _speak_multilang(
                "I couldn't understand the song name.",
                hi="‡§Æ‡•à‡§Ç ‡§ó‡§æ‡§®‡•á ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§",
                de="Ich konnte den Liednamen nicht verstehen.",
                fr="Je n'ai pas compris le nom de la chanson.",
                es="No entend√≠ el nombre de la canci√≥n."
            )

    # üîä Volume Control ‚Äî Multilingual Trigger + Multilingual Response
    elif any(phrase in command for phrase in [
        "increase volume", "turn up the volume",
        "‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§¨‡§¢‡§º‡§æ‡§ì", "‡§Ü‡§µ‡§æ‡§ú‡§º ‡§¨‡§¢‡§º‡§æ‡§ì",                       # Hindi
        "augmenter le volume", "monte le son",             # French
        "subir el volumen", "aumentar volumen",            # Spanish
        "lautst√§rke erh√∂hen", "ton lauter machen"          # German
    ]):
        print("üîä Increasing volume...")
        for _ in range(5):
            ctypes.windll.user32.keybd_event(0xAF, 0, 0, 0)
        _speak_multilang(
            "Volume increased.",
            hi="‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§¨‡§¢‡§º‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
            de="Lautst√§rke erh√∂ht.",
            fr="Le volume a √©t√© augment√©.",
            es="Volumen aumentado."
        )

    elif any(phrase in command for phrase in [
        "decrease volume", "turn down the volume",
        "‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§ò‡§ü‡§æ‡§ì", "‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ï‡§Æ ‡§ï‡§∞‡•ã",                      # Hindi
        "baisser le volume", "r√©duire le volume",          # French
        "bajar el volumen", "reducir volumen",             # Spanish
        "lautst√§rke verringern", "ton leiser machen"       # German
    ]):
        print("üîä Decreasing volume...")
        for _ in range(5):
            ctypes.windll.user32.keybd_event(0xAE, 0, 0, 0)
        _speak_multilang(
            "Volume decreased.",
            hi="‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§ò‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
            de="Lautst√§rke verringert.",
            fr="Le volume a √©t√© diminu√©.",
            es="Volumen disminuido."
        )

    elif any(phrase in command for phrase in [
        "mute volume", "mute sound",
        "‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡•ã", "‡§Ü‡§µ‡§æ‡§ú‡§º ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã",                     # Hindi
        "couper le son", "mettre en sourdine",              # French
        "silenciar volumen", "silenciar el sonido",         # Spanish
        "lautst√§rke stummschalten", "ton stumm"             # German
    ]):
        print("üîá Muting volume...")
        ctypes.windll.user32.keybd_event(0xAD, 0, 0, 0)
        _speak_multilang(
            "Volume muted.",
            hi="‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
            de="Lautst√§rke stummgeschaltet.",
            fr="Volume coup√©.",
            es="Volumen silenciado."
        )

    elif any(phrase in command for phrase in [
        "max volume", "set volume to maximum",
        "‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ", "‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§´‡•Å‡§≤ ‡§ï‡§∞‡•ã",                     # Hindi
        "volume maximum", "mettre le volume √† fond",         # French
        "volumen m√°ximo", "subir volumen al m√°ximo",         # Spanish
        "maximale lautst√§rke", "lautst√§rke ganz hoch"        # German
    ]):
        print("üîä Setting volume to MAX...")
        for _ in range(10):
            ctypes.windll.user32.keybd_event(0xAF, 0, 0, 0)
        _speak_multilang(
            "Volume set to maximum.",
            hi="‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
            de="Lautst√§rke auf Maximum eingestellt.",
            fr="Volume r√©gl√© au maximum.",
            es="Volumen establecido al m√°ximo."
        )

    elif any(phrase in command for phrase in [
        "set volume to", "adjust volume to",
        "‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•ã", "‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§ï‡•ã ‡§∏‡•á‡§ü ‡§ï‡§∞‡•ã",                   # Hindi
        "r√©gler le volume √†", "ajuster le volume √†",         # French
        "establecer volumen a", "ajustar el volumen a",      # Spanish
        "lautst√§rke einstellen auf", "lautst√§rke setzen auf" # German
    ]):
        match = re.search(r"(\d+)", command)
        if match:
            vol = int(match.group(1))
            print(f"üîä Setting volume to {vol}%...")
            set_volume(vol)
            _speak_multilang(
                f"Setting volume to {vol} percent.",
                hi=f"‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ {vol} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
                de=f"Lautst√§rke wird auf {vol} Prozent eingestellt.",
                fr=f"R√©glage du volume √† {vol} pour cent.",
                es=f"Estableciendo el volumen al {vol} por ciento."
            )
        else:
            _speak_multilang(
                "Please say a volume level like set volume to 50 percent.",
                hi="‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ ‡§∏‡•ç‡§§‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç, ‡§ú‡•à‡§∏‡•á ‡§ï‡§ø '‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ 50 ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç'‡•§",
                de="Bitte sagen Sie eine Lautst√§rke wie 'Lautst√§rke auf 50 Prozent setzen'.",
                fr="Veuillez indiquer un niveau de volume comme 'r√©gler le volume √† 50 pour cent'.",
                es="Por favor, diga un nivel de volumen como 'establecer el volumen al 50 por ciento'."
            )
     
    
    # üå¶Ô∏è Weather ‚Äî Multilingual Trigger
    elif any(kw in command for kw in [
        "weather", "temperature", "‡§Æ‡•å‡§∏‡§Æ", "clima", "temps", "wetter"
    ]):
        city_match = re.search(r"in (\w+)", command)
        if city_match:
            city = city_match.group(1)
            get_weather(city)
        else:
            _speak_multilang(
                "Please tell me the city you want weather for.",
                hi="‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø‡§∏ ‡§∂‡§π‡§∞ ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§",
                fr="Veuillez indiquer la ville pour la m√©t√©o.",
                es="Por favor, di el nombre de la ciudad para el clima.",
                de="Bitte sagen Sie den Stadtnamen f√ºr das Wetter."
            )

    
    # üóûÔ∏è News ‚Äî Multilingual Trigger
    elif any(kw in command for kw in [
        "news", "headlines", "latest news",
        "‡§ñ‡§¨‡§∞‡•á‡§Ç", "‡§§‡§æ‡§ú‡§º‡§æ ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞",                      # Hindi
        "nachrichten", "schlagzeilen",            # German
        "actualit√©s", "nouvelles",                # French
        "noticias", "titulares"                   # Spanish
    ]):
        get_headlines()


    
    # üí° Brightness ‚Äî Multilingual Trigger + Multilingual Response
    elif any(phrase in command for phrase in [
        "increase brightness", "brighten my screen",
        "‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏ ‡§¨‡§¢‡§º‡§æ‡§ì", "‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§ö‡§Æ‡§ï ‡§¨‡§¢‡§º‡§æ‡§ì",                           # Hindi
        "augmenter la luminosit√©", "rendre l'√©cran plus lumineux",  # French
        "aumentar el brillo", "subir el brillo",                    # Spanish
        "helligkeit erh√∂hen", "bildschirm heller machen"            # German
    ]):
        print("üí° Brightness: Increasing")
        _speak_multilang(
            "Increasing brightness.",
            hi="‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏ ‡§¨‡§¢‡§º‡§æ‡§à ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à‡•§",
            fr="Augmentation de la luminosit√©.",
            es="Aumentando el brillo.",
            de="Helligkeit wird erh√∂ht."
        )
        change_brightness(increase=True)

    elif any(phrase in command for phrase in [
        "decrease brightness", "dim my screen",
        "‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏ ‡§ï‡§Æ ‡§ï‡§∞‡•ã", "‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§ï‡§Æ ‡§∞‡•ã‡§∂‡§®‡•Ä ‡§ï‡§∞‡•ã",                      # Hindi
        "r√©duire la luminosit√©", "assombrir l'√©cran",               # French
        "bajar el brillo", "reducir el brillo",                     # Spanish
        "helligkeit verringern", "bildschirm abdunkeln"             # German
    ]):
        print("üí° Brightness: Decreasing")
        _speak_multilang(
            "Decreasing brightness.",
            hi="‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏ ‡§ï‡§Æ ‡§ï‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à‡•§",
            fr="R√©duction de la luminosit√©.",
            es="Disminuyendo el brillo.",
            de="Helligkeit wird verringert."
        )
        change_brightness(increase=False)

    elif any(phrase in command for phrase in [
        "set brightness to", "adjust brightness to",                
        "‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•ã", "‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏ ‡§ï‡•ã ‡§∏‡•á‡§ü ‡§ï‡§∞‡•ã",                       # Hindi
        "r√©gler la luminosit√© √†", "ajuster la luminosit√© √†",        # French
        "establecer brillo a", "ajustar el brillo a",               # Spanish
        "helligkeit einstellen auf", "helligkeit setzen auf"        # German
    ]):
        match = re.search(r"(\d+)", command)
        if match:
            level = int(match.group(1))
            print(f"üí° Brightness: Setting to {level}%")
            _speak_multilang(
                f"Setting brightness to {level} percent.",
                hi=f"‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏ ‡§ï‡•ã {level} ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
                fr=f"Luminosit√© r√©gl√©e √† {level} pour cent.",
                es=f"Ajustando el brillo al {level} por ciento.",
                de=f"Helligkeit wird auf {level} Prozent eingestellt."
            )
            change_brightness(level=level)
        else:
            _speak_multilang(
                "Please say a brightness level like 'set brightness to 70 percent'.",
                hi="‡§ï‡•É‡§™‡§Ø‡§æ ‡§ê‡§∏‡§æ ‡§ï‡§π‡•á‡§Ç: '‡§¨‡•ç‡§∞‡§æ‡§á‡§ü‡§®‡•á‡§∏ ‡§ï‡•ã 70 ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç'‡•§",
                fr="Veuillez dire quelque chose comme 'r√©gler la luminosit√© √† 70 pour cent'.",
                es="Por favor, di algo como 'ajustar el brillo al 70 por ciento'.",
                de="Bitte sagen Sie etwas wie 'Helligkeit auf 70 Prozent einstellen'."
            )


    # üíª System Control ‚Äî Multilingual Trigger + Multilingual Response
    elif any(phrase in command for phrase in [
        "shutdown system", "turn off computer", "power off",
        "‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§¨‡§Ç‡§¶", "‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§¨‡§Ç‡§¶",
        "arr√™ter le syst√®me", "√©teindre l'ordinateur",
        "apagar el sistema", "apagar la computadora",
        "system herunterfahren", "computer ausschalten"
    ]):
        print("üñ•Ô∏è System: Shutdown initiated")
        _speak_multilang(
            "Shutting down the system now.",
            hi="‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§ï‡•ã ‡§Ö‡§≠‡•Ä ‡§¨‡§Ç‡§¶ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
            fr="Arr√™t du syst√®me maintenant.",
            es="Apagando el sistema ahora.",
            de="Das System wird jetzt heruntergefahren."
        )
        os.system("shutdown /s /t 1")

    elif any(phrase in command for phrase in [
        "restart", "reboot", "system restart",
        "‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§™‡•Å‡§®‡§É ‡§Ü‡§∞‡§Ç‡§≠", "‡§∞‡•Ä‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü",
        "red√©marrer", "red√©marrage du syst√®me",
        "reiniciar", "reiniciar el sistema",
        "neu starten", "system neu starten"
    ]):
        print("üîÅ System: Restarting now")
        _speak_multilang(
            "Restarting the system.",
            hi="‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§ï‡•ã ‡§™‡•Å‡§®‡§É ‡§Ü‡§∞‡§Ç‡§≠ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
            fr="Red√©marrage du syst√®me.",
            es="Reiniciando el sistema.",
            de="System wird neu gestartet."
        )
        os.system("shutdown /r /t 1")

    elif any(phrase in command for phrase in [
        "sleep", "put to sleep", "go to sleep",
        "‡§∏‡•ç‡§≤‡•Ä‡§™ ‡§Æ‡•ã‡§°", "‡§®‡•Ä‡§Ç‡§¶ ‡§Æ‡•ã‡§°",
        "mettre en veille", "mode veille",
        "modo de suspensi√≥n", "poner en reposo",
        "schlafmodus", "in den schlafmodus versetzen"
    ]):
        print("üò¥ System: Going to sleep")
        _speak_multilang(
            "Putting the computer to sleep.",
            hi="‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§ï‡•ã ‡§∏‡•ç‡§≤‡•Ä‡§™ ‡§Æ‡•ã‡§° ‡§Æ‡•á‡§Ç ‡§°‡§æ‡§≤‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
            fr="Mise en veille de l'ordinateur.",
            es="Poniendo el ordenador en suspensi√≥n.",
            de="Computer wird in den Ruhezustand versetzt."
        )
        os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")

    elif any(phrase in command for phrase in [
        "lock", "lock screen",
        "‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§≤‡•â‡§ï", "‡§≤‡•â‡§ï ‡§ï‡§∞‡•á‡§Ç",
        "verrouiller l'√©cran", "verrouiller",
        "bloquear pantalla", "bloquear",
        "bildschirm sperren", "sperren"
    ]):
        print("üîí System: Locking screen")
        _speak_multilang(
            "Locking the screen now.",
            hi="‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§ï‡•ã ‡§≤‡•â‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
            fr="Verrouillage de l'√©cran maintenant.",
            es="Bloqueando la pantalla ahora.",
            de="Bildschirm wird jetzt gesperrt."
        )
        os.system("rundll32.exe user32.dll,LockWorkStation")

    elif any(phrase in command for phrase in [
        "log out", "sign out",
        "‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü", "‡§∏‡§æ‡§á‡§® ‡§Ü‡§â‡§ü",
        "se d√©connecter", "d√©connexion",
        "cerrar sesi√≥n", "desconectar",
        "abmelden", "ausloggen"
    ]):
        print("üö™ System: Logging out")
        _speak_multilang(
            "Logging you out now.",
            hi="‡§Ö‡§¨ ‡§Ü‡§™‡§ï‡•ã ‡§≤‡•â‡§ó ‡§Ü‡§â‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
            fr="D√©connexion en cours.",
            es="Cerrando sesi√≥n ahora.",
            de="Sie werden jetzt abgemeldet."
        )
        os.system("shutdown /l")

    # ‚è∞ Alarm (Multilingual Trigger)
    elif any(phrase in command for phrase in alarm_phrases):
        match = re.search(r"(\d{1,2})[\s:](\d{1,2})", command)
        if match:
            hour = int(match.group(1))
            minute = int(match.group(2))

            def alarm_checker():
                _speak_multilang(
                    f"Alarm set for {hour:02d}:{minute:02d}. I‚Äôll notify you.",
                    hi=f"‡§Ö‡§≤‡§æ‡§∞‡•ç‡§Æ {hour:02d}:{minute:02d} ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•Ç‡§Å‡§ó‡§æ‡•§",
                    de=f"Alarm f√ºr {hour:02d}:{minute:02d} eingestellt. Ich werde Sie benachrichtigen.",
                    fr=f"Alarme r√©gl√©e pour {hour:02d}:{minute:02d}. Je vous avertirai.",
                    es=f"Alarma configurada para las {hour:02d}:{minute:02d}. Te lo recordar√©."
                )
                while True:
                    now = datetime.datetime.now()
                    if now.hour == hour and now.minute == minute:
                        _speak_multilang(
                            f"It's {hour:02d}:{minute:02d}. Time to wake up!",
                            hi=f"{hour:02d}:{minute:02d} ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§Ö‡§¨ ‡§â‡§†‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§π‡•à!",
                            de=f"Es ist {hour:02d}:{minute:02d}. Zeit zum Aufstehen!",
                            fr=f"Il est {hour:02d}:{minute:02d}. Il est temps de se lever !",
                            es=f"Son las {hour:02d}:{minute:02d}. ¬°Es hora de despertarse!"
                        )
                        break
                    time.sleep(10)

            threading.Thread(target=alarm_checker, daemon=True).start()

        else:
            _speak_multilang(
                "Say something like 'set alarm for 6 30'.",
                hi="‡§ï‡•Å‡§õ ‡§ê‡§∏‡§æ ‡§ï‡§π‡•á‡§Ç ‡§ú‡•à‡§∏‡•á '6 30 ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≤‡§æ‡§∞‡•ç‡§Æ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç'‡•§",
                de="Sagen Sie etwas wie 'Wecker auf 6 30 stellen'.",
                fr="Dites quelque chose comme 'r√©gler l'alarme pour 6h30'.",
                es="Di algo como 'configura la alarma para las 6 30'."
            )


    # üìù Reminder (Multilingual Trigger)
    elif any(phrase in command for phrase in reminder_phrases):
        match = re.search(r"(\d{1,2})[\s:](\d{1,2}).*?(to|‡§ï‡§ø|√†|para|um)\s(.+)", command)
        if match:
            hour = int(match.group(1))
            minute = int(match.group(2))
            task = match.group(4).strip()

            def reminder_checker():
                _speak_multilang(
                    f"Reminder set for {hour:02d}:{minute:02d} to {task}.",
                    hi=f"{hour:02d}:{minute:02d} ‡§¨‡§ú‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡§ø‡§Æ‡§æ‡§á‡§Ç‡§°‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à: {task}",
                    de=f"Erinnerung um {hour:02d}:{minute:02d} eingestellt f√ºr: {task}",
                    fr=f"Rappel d√©fini pour {hour:02d}:{minute:02d} pour : {task}",
                    es=f"Recordatorio establecido para las {hour:02d}:{minute:02d} para: {task}"
                )
                while True:
                    now = datetime.datetime.now()
                    if now.hour == hour and now.minute == minute:
                        _speak_multilang(
                            f"This is your reminder: {task}",
                            hi=f"‡§Ø‡§π ‡§Ü‡§™‡§ï‡•Ä ‡§Ø‡§æ‡§¶ ‡§¶‡§ø‡§≤‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§¨‡§æ‡§§ ‡§π‡•à: {task}",
                            de=f"Das ist Ihre Erinnerung: {task}",
                            fr=f"Voici votre rappel : {task}",
                            es=f"Aqu√≠ est√° tu recordatorio: {task}"
                        )
                        break
                    time.sleep(10)

            threading.Thread(target=reminder_checker, daemon=True).start()

        else:
            _speak_multilang(
                "Say something like 'Remind me at 3 30 to watch the match'.",
                hi="‡§ê‡§∏‡§æ ‡§ï‡•Å‡§õ ‡§ï‡§π‡•á‡§Ç ‡§ú‡•à‡§∏‡•á '‡§Æ‡•Å‡§ù‡•á 3 30 ‡§¨‡§ú‡•á ‡§Æ‡•à‡§ö ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§æ‡§¶ ‡§¶‡§ø‡§≤‡§æ‡§è‡§Ç'‡•§",
                de="Sagen Sie etwas wie 'Erinnere mich um 3 30 an das Spiel'.",
                fr="Dites quelque chose comme 'Rappelle-moi √† 3 30 de regarder le match'.",
                es="Di algo como 'Recu√©rdame a las 3 30 ver el partido'."
            )


    # üìö Wikipedia (Multilingual query + language override + terminal display)
    elif any(kw in command for kw in [
        "what is", "who is", "define", "tell me about",         # English
        "‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à", "‡§ï‡•å‡§® ‡§π‡•à",                                       # Hindi
        "qu'est-ce que", "qui est",                             # French
        "qu√© es", "qui√©n es",                                   # Spanish
        "was ist", "wer ist"                                    # German
    ]):
        try:
            wiki_lang = selected_language  # üåê Default to current session language

            # üåç Manual override if user specifies language
            if " in hindi" in command:
                wiki_lang = "hi"
                command = command.replace(" in hindi", "")
            elif " in spanish" in command:
                wiki_lang = "es"
                command = command.replace(" in spanish", "")
            elif " in french" in command:
                wiki_lang = "fr"
                command = command.replace(" in french", "")
            elif " in german" in command or " in deutsch" in command:
                wiki_lang = "de"
                command = command.replace(" in german", "").replace(" in deutsch", "")

            # üîç Extract actual topic
            topic = re.sub(
                r"(what is|who is|define|tell me about|‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à|‡§ï‡•å‡§® ‡§π‡•à|qu'est-ce que|qui est|qu√© es|qui√©n es|was ist|wer ist)",
                "", command, flags=re.IGNORECASE
            ).strip()

            if not topic:
                _speak_multilang(
                    "Please specify what you want to know.",
                    hi="‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§",
                    fr="Veuillez pr√©ciser ce que vous voulez savoir.",
                    es="Por favor, especifica lo que quieres saber.",
                    de="Bitte geben Sie an, was Sie wissen m√∂chten."
                )
                return

            # üåê Set Wikipedia language and search
            wikipedia.set_lang(wiki_lang)
            summary = wikipedia.summary(topic, sentences=2)

            # üñ•Ô∏è Terminal output
            print("\nüìö NOVA WIKIPEDIA ANSWER")
            print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
            print(f"üîé Topic: {topic}")
            print(f"üåê Language: {wiki_lang.upper()}")
            print(f"üìñ Answer: {summary}\n")

            # üó£Ô∏è Voice output
            _speak_multilang(summary)

        except wikipedia.exceptions.DisambiguationError:
            _speak_multilang(
                "That topic is too broad. Try something more specific.",
                hi="‡§µ‡§ø‡§∑‡§Ø ‡§¨‡§π‡•Å‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ï‡§π‡•á‡§Ç‡•§",
                fr="Ce sujet est trop vaste. Essayez quelque chose de plus pr√©cis.",
                es="Ese tema es demasiado amplio. Intenta algo m√°s espec√≠fico.",
                de="Dieses Thema ist zu allgemein. Versuchen Sie etwas Spezifischeres."
            )

        except wikipedia.exceptions.PageError:
            _speak_multilang(
                "I couldn't find anything on Wikipedia about that.",
                hi="‡§Æ‡•à‡§Ç ‡§â‡§∏ ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§µ‡§ø‡§ï‡§ø‡§™‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§™‡§∞ ‡§ï‡•Å‡§õ ‡§®‡§π‡•Ä‡§Ç ‡§¢‡•Ç‡§Ç‡§¢ ‡§™‡§æ‡§Ø‡§æ‡•§",
                fr="Je n'ai rien trouv√© sur Wikip√©dia √† ce sujet.",
                es="No pude encontrar nada sobre eso en Wikipedia.",
                de="Ich konnte nichts dar√ºber auf Wikipedia finden."
            )

        except Exception:
            _speak_multilang(
                "Something went wrong while searching Wikipedia.",
                hi="‡§µ‡§ø‡§ï‡§ø‡§™‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§ñ‡•ã‡§ú‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•ã ‡§ó‡§à‡•§",
                fr="Une erreur s'est produite lors de la recherche sur Wikip√©dia.",
                es="Algo sali√≥ mal al buscar en Wikipedia.",
                de="Beim Durchsuchen von Wikipedia ist ein Fehler aufgetreten."
            )


    # üß† Remember Name ‚Äî Multilingual Trigger
    elif any(kw in command for kw in [
        "my name is", "‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ", "je m'appelle", "me llamo", "ich hei√üe"
    ]):
        name = None

        # üåç Try to extract name using regex patterns in multiple languages
        match = re.search(r"(my name is|‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ|je m'appelle|me llamo|ich hei√üe)\s+([a-zA-Z√Ä-√ø\u0900-\u097F]+)", command)
        if match:
            name = match.group(2).strip()

        if name:
            # üîí Save to memory.json
            from memory_handler import save_memory
            save_memory("name", name)

            # üó£Ô∏è Confirm aloud in the chosen language
            _speak_multilang(
                f"Nice to meet you, {name}!",
                hi=f"‡§Ü‡§™‡§∏‡•á ‡§Æ‡§ø‡§≤‡§ï‡§∞ ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•Å‡§à, {name}!",
                fr=f"Ravi de vous rencontrer, {name}!",
                es=f"Encantado de conocerte, {name}!",
                de=f"Freut mich, dich kennenzulernen, {name}!"
            )
        else:
            _speak_multilang(
                "Sorry, I couldn't catch your name.",
                hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§Æ‡§ù ‡§™‡§æ‡§Ø‡§æ‡•§",
                fr="D√©sol√©, je n'ai pas compris votre nom.",
                es="Lo siento, no entend√≠ tu nombre.",
                de="Entschuldigung, ich habe deinen Namen nicht verstanden."
            )


    # üß† Recall Name ‚Äî Multilingual Trigger
    elif any(kw in command for kw in [
        "what's my name", "what is my name",         # English
        "‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à",                              # Hindi
        "quel est mon nom",                          # French
        "cu√°l es mi nombre",                         # Spanish
        "wie hei√üe ich"                              # German
    ]):
        from memory_handler import load_memory
        name = load_memory("name")

        if name:
            _speak_multilang(
                f"Your name is {name}.",
                hi=f"‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ {name} ‡§π‡•à‡•§",
                fr=f"Votre nom est {name}.",
                es=f"Tu nombre es {name}.",
                de=f"Dein Name ist {name}."
            )
        else:
            _speak_multilang(
                "I don‚Äôt know your name yet. You can tell me by saying, 'My name is...'",
                hi="‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§≠‡•Ä ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§™‡§§‡§æ‡•§ ‡§Ü‡§™ ‡§ï‡§π ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, '‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ ... ‡§π‡•à'‡•§",
                fr="Je ne connais pas encore votre nom. Vous pouvez me dire, 'Je m'appelle...'",
                es="A√∫n no s√© tu nombre. Puedes decir, 'Me llamo...'",
                de="Ich kenne deinen Namen noch nicht. Du kannst sagen: 'Ich hei√üe...'"
            )
    

    # üß† Store general preferences ‚Äî multilingual support
    elif any(phrase in command for phrase in [
        "i like", "i love", "my favorite",           # English
        "‡§Æ‡•Å‡§ù‡•á ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à", "‡§Æ‡•á‡§∞‡§æ ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ",                    # Hindi
        "j'aime", "mon pr√©f√©r√©",                     # French
        "me gusta", "mi favorito",                   # Spanish
        "ich mag", "mein lieblings"                  # German
    ]):
        from memory_handler import save_memory

        try:
            # Remove trigger phrase to isolate preference
            preference = re.sub(
                r"(i like|i love|my favorite|‡§Æ‡•Å‡§ù‡•á ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à|‡§Æ‡•á‡§∞‡§æ ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ|j'aime|mon pr√©f√©r√©|me gusta|mi favorito|ich mag|mein lieblings)",
                "", command, flags=re.IGNORECASE
            ).strip()

            if preference:
                save_memory("preference", preference)

                _speak_multilang(
                    f"Got it! I'll remember that you like {preference}.",
                    hi=f"‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ! ‡§Æ‡•à‡§Ç ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•Ç‡§Ç‡§ó‡§æ ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã {preference} ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à‡•§",
                    fr=f"Compris ! Je me souviendrai que vous aimez {preference}.",
                    es=f"Entendido. Recordar√© que te gusta {preference}.",
                    de=f"Alles klar! Ich werde mir merken, dass du {preference} magst."
                )
            else:
                raise ValueError("Empty preference")

        except:
            _speak_multilang(
                "Sorry, I couldn't understand your preference.",
                hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§∏‡§Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§Æ‡§ù ‡§™‡§æ‡§Ø‡§æ‡•§",
                fr="D√©sol√©, je n'ai pas compris votre pr√©f√©rence.",
                es="Lo siento, no entend√≠ tu preferencia.",
                de="Entschuldigung, ich habe deine Vorliebe nicht verstanden."
            )


    # üîÅ Update memory values ‚Äî multilingual support
    elif any(phrase in command for phrase in ["update my", "change my", "‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§¶‡§≤‡•ã", "modifie mon", "cambia mi", "√§ndere meinen"]):
        from memory_handler import save_memory

        try:
            # üåç Try to extract key and new value
            match = re.search(r"(update|change|‡§¨‡§¶‡§≤‡•ã|modifie|cambia|√§ndere)\s+my\s+(\w+)\s+(to|‡§∏‡•á|en|a|zu)\s+([a-zA-Z√Ä-√ø\u0900-\u097F]+)", command)
            if match:
                key = match.group(2).strip().lower()
                new_value = match.group(4).strip()
                save_memory(key, new_value)

                _speak_multilang(
                    f"Got it. I've updated your {key} to {new_value}.",
                    hi=f"‡§†‡•Ä‡§ï ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ü‡§™‡§ï‡§æ {key} {new_value} ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à‡•§",
                    fr=f"D'accord. J'ai mis √† jour votre {key} en {new_value}.",
                    es=f"Entendido. He actualizado tu {key} a {new_value}.",
                    de=f"Alles klar. Ich habe deinen {key} auf {new_value} aktualisiert."
                )
            else:
                raise ValueError("Could not extract key/value")

        except:
            _speak_multilang(
                "Sorry, I couldn't understand what to update.",
                hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§¶‡§≤‡§®‡§æ ‡§π‡•à‡•§",
                fr="D√©sol√©, je n'ai pas compris ce qu'il faut changer.",
                es="Lo siento, no entend√≠ qu√© actualizar.",
                de="Entschuldigung, ich habe nicht verstanden, was aktualisiert werden soll."
            )


    # üßπ Clear memory ‚Äî specific or all
    elif any(phrase in command for phrase in ["forget", "delete", "remove", "‡§Æ‡§ø‡§ü‡§æ ‡§¶‡•ã", "oublie", "olvida", "vergiss"]):
        from memory_handler import clear_memory

        try:
            if "everything" in command or "‡§∏‡§¨ ‡§ï‡•Å‡§õ" in command or "tout" in command or "todo" in command or "alles" in command:
                clear_memory()  # Wipe all keys
                _speak_multilang(
                    "Memory cleared completely.",
                    hi="‡§∏‡§æ‡§∞‡•Ä ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§π‡§ü‡§æ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§",
                    fr="La m√©moire a √©t√© compl√®tement effac√©e.",
                    es="La memoria se ha borrado completamente.",
                    de="Der gesamte Speicher wurde gel√∂scht."
                )
            else:
                # Try to guess the specific key to delete (e.g., name, preference)
                key = None
                if "name" in command or "‡§®‡§æ‡§Æ" in command or "nom" in command or "nombre" in command:
                    key = "name"
                elif "preference" in command or "‡§™‡§∏‡§Ç‡§¶" in command or "pr√©f√©rence" in command or "preferencia" in command or "Vorliebe" in command:
                    key = "preference"

                if key:
                    clear_memory(key)
                    _speak_multilang(
                        f"I've forgotten your {key}.",
                        hi=f"‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ü‡§™‡§ï‡§æ {key} ‡§≠‡•Ç‡§≤ ‡§ó‡§Ø‡§æ ‡§π‡•Ç‡§Å‡•§",
                        fr=f"J'ai oubli√© votre {key}.",
                        es=f"He olvidado tu {key}.",
                        de=f"Ich habe deine {key} vergessen."
                    )
                else:
                    raise ValueError("Unknown key")

        except:
            _speak_multilang(
                "Sorry, I couldn't clear the memory properly.",
                hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§∏‡§æ‡§´‡§º ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§™‡§æ‡§Ø‡§æ‡•§",
                fr="D√©sol√©, je n'ai pas pu effacer la m√©moire.",
                es="Lo siento, no pude borrar la memoria.",
                de="Entschuldigung, ich konnte den Speicher nicht l√∂schen."
            )

    
    # üìù Voice Note ‚Äî multilingual note-taking
    elif any(phrase in command for phrase in [
        "take a note", "write this down", "make a note",       # English
        "‡§®‡•ã‡§ü ‡§¨‡§®‡§æ‡§ì",                                            # Hindi
        "prends une note",                                     # French
        "toma una nota",                                       # Spanish
        "notiere etwas"                                        # German
    ]):
        from memory_handler import save_note
        try:
            speak("What would you like me to note down?")
            note_content = listen_command().strip()

            if note_content:
                save_note(note_content)

                _speak_multilang(
                    "Noted successfully.",
                    hi="‡§®‡•ã‡§ü ‡§¨‡§®‡§æ ‡§≤‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
                    fr="Note enregistr√©e avec succ√®s.",
                    es="Nota guardada con √©xito.",
                    de="Notiz erfolgreich gespeichert."
                )
            else:
                raise ValueError("Empty note")

        except Exception:
            _speak_multilang(
                "Sorry, I couldn‚Äôt save your note.",
                hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§®‡•ã‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§π‡•á‡§ú ‡§™‡§æ‡§Ø‡§æ‡•§",
                fr="D√©sol√©, je n'ai pas pu enregistrer votre note.",
                es="Lo siento, no pude guardar tu nota.",
                de="Entschuldigung, ich konnte deine Notiz nicht speichern."
            )


    # üìñ Read all saved notes ‚Äî multilingual support
    elif any(phrase in command for phrase in [
        "read my notes", "show my notes", "‡§®‡•ã‡§ü‡•ç‡§∏ ‡§™‡§¢‡§º‡•ã", "‡§Æ‡•á‡§∞‡•á ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§ì",
        "lire mes notes", "montre mes notes",
        "lee mis notas", "mu√©strame mis notas",
        "lies meine notizen", "zeige meine notizen"
    ]):
        from memory_handler import load_notes
        notes = load_notes()

        if not notes:
            _speak_multilang(
                "You have no saved notes.",
                hi="‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ï‡•ã‡§à ‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§",
                fr="Vous n'avez aucune note enregistr√©e.",
                es="No tienes notas guardadas.",
                de="Du hast keine gespeicherten Notizen."
            )
        else:
            _speak_multilang(
                f"You have {len(notes)} notes. Reading them now.",
                hi=f"‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ {len(notes)} ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§π‡•à‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Ö‡§¨ ‡§™‡§¢‡§º ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§",
                fr=f"Vous avez {len(notes)} notes. Je vais les lire.",
                es=f"Tienes {len(notes)} notas. Ley√©ndolas ahora.",
                de=f"Du hast {len(notes)} Notizen. Ich lese sie vor."
            )

            # üñ®Ô∏è Print all notes with index and timestamp in terminal
            for idx, note in enumerate(notes, start=1):
                print(f"üìù [{idx}] ({note['timestamp']}): {note['content']}")

            # üîä Speak each note
            for note in notes:
                _speak_multilang(note['content'])
    


    # ‚úèÔ∏è Update a note by number or keyword
    elif any(phrase in command for phrase in [
        "update note", "change note", "edit note", "‡§®‡•ã‡§ü ‡§¨‡§¶‡§≤‡•ã",
        "modifie la note", "cambia la nota", "√§ndere die notiz"
    ]):
        from memory_handler import update_note

        try:
            index = None
            keyword = None
            new_content = None

            # üéØ Try to extract index
            match = re.search(r"note\s*(number\s*)?(\d+)\s*(to|into)?\s*(.+)", command)
            if match:
                index = int(match.group(2))
                new_content = match.group(4).strip()
            else:
                # üîç Try keyword-based update
                match_kw = re.search(r"(?:update|change|edit)\s+note\s+(.*?)\s+(to|into)\s+(.+)", command)
                if match_kw:
                    keyword = match_kw.group(1).strip()
                    new_content = match_kw.group(3).strip()

            if new_content and (index or keyword):
                success = update_note(index=index, keyword=keyword, new_content=new_content)
                if success:
                    _speak_multilang(
                        "Note updated successfully.",
                        hi="‡§®‡•ã‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§",
                        fr="Note mise √† jour avec succ√®s.",
                        es="Nota actualizada con √©xito.",
                        de="Notiz erfolgreich aktualisiert."
                    )
                else:
                    raise ValueError("Note not found")
            else:
                raise ValueError("Could not parse command")

        except:
            _speak_multilang(
                "Sorry, I couldn't update the note.",
                hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§®‡•ã‡§ü ‡§Ö‡§™‡§°‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§™‡§æ‡§Ø‡§æ‡•§",
                fr="D√©sol√©, je n'ai pas pu mettre √† jour la note.",
                es="Lo siento, no pude actualizar la nota.",
                de="Entschuldigung, ich konnte die Notiz nicht aktualisieren."
            )


    # üîç Search notes by keyword and read ‚Äî multilingual trigger
    elif any(phrase in command for phrase in [
        "search notes", "find notes", "look for note", "‡§®‡•ã‡§ü ‡§ñ‡•ã‡§ú‡•á‡§Ç", "‡§®‡•ã‡§ü ‡§¢‡•Ç‡§Ç‡§¢‡•ã",
        "chercher des notes", "trouve des notes",
        "buscar notas", "encontrar notas",
        "suche notizen", "finde notizen"
    ]):
        try:
            # üéØ Extract keyword from command
            keyword = re.sub(
                r"(search notes|find notes|look for note|‡§®‡•ã‡§ü ‡§ñ‡•ã‡§ú‡•á‡§Ç|‡§®‡•ã‡§ü ‡§¢‡•Ç‡§Ç‡§¢‡•ã|chercher des notes|trouve des notes|buscar notas|encontrar notas|suche notizen|finde notizen)",
                "", command, flags=re.IGNORECASE
            ).strip()

            results = search_notes(keyword)

            if not results:
                _speak_multilang(
                    "No notes found with that keyword.",
                    hi="‡§â‡§∏ ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§∏‡•á ‡§ï‡•ã‡§à ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á‡•§",
                    fr="Aucune note trouv√©e avec ce mot-cl√©.",
                    es="No se encontraron notas con esa palabra clave.",
                    de="Keine Notizen mit diesem Stichwort gefunden."
                )
            else:
                _speak_multilang(
                    f"I found {len(results)} notes with that keyword.",
                    hi=f"‡§Æ‡•Å‡§ù‡•á ‡§â‡§∏ ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§∏‡•á {len(results)} ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§Æ‡§ø‡§≤‡•á‡•§",
                    fr=f"J'ai trouv√© {len(results)} notes avec ce mot-cl√©.",
                    es=f"Encontr√© {len(results)} notas con esa palabra clave.",
                    de=f"Ich habe {len(results)} Notizen mit diesem Stichwort gefunden."
                )

                # üñ®Ô∏è Print notes with index in terminal
                print("\nüîé Matching Notes:")
                for i, note in enumerate(results, 1):
                    print(f"{i}. [{note['timestamp']}] {note['content']}")

                # üì£ Ask if user wants to hear one
                _speak_multilang(
                    "Would you like me to read one of them? Say the note number or say cancel.",
                    hi="‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§â‡§®‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§è‡§ï ‡§®‡•ã‡§ü ‡§∏‡•Å‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á? ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§á‡§è ‡§Ø‡§æ ‡§ï‡•à‡§Ç‡§∏‡§ø‡§≤ ‡§ï‡§π‡§ø‡§è‡•§",
                    fr="Souhaitez-vous que je lise l'une d'elles ? Dites le num√©ro ou annulez.",
                    es="¬øQuieres que lea una de ellas? Di el n√∫mero o cancela.",
                    de="M√∂chtest du, dass ich eine davon vorlese? Sag die Nummer oder abbrechen."
                )

                user_reply = listen_command().lower()
                if user_reply and any(word in user_reply for word in ["cancel", "‡§ï‡•à‡§Ç‡§∏‡§ø‡§≤", "annule", "cancela", "abbrechen"]):
                    _speak_multilang(
                        "Okay, cancelled reading.",
                        hi="‡§†‡•Ä‡§ï ‡§π‡•à, ‡§™‡§¢‡§º‡§®‡§æ ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§ø‡§Ø‡§æ‡•§",
                        fr="D'accord, lecture annul√©e.",
                        es="Vale, lectura cancelada.",
                        de="Okay, Lesen abgebrochen."
                    )
                else:
                    # üî¢ Try extracting number
                    match = re.search(r"\d+", user_reply)
                    if match:
                        index = int(match.group())
                        if 1 <= index <= len(results):
                            selected_note = results[index - 1]['content']
                            _speak_multilang(selected_note)
                        else:
                            _speak_multilang(
                                "That number is out of range.",
                                hi="‡§µ‡§π ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§∏‡•Ä‡§Æ‡§æ ‡§∏‡•á ‡§¨‡§æ‡§π‡§∞ ‡§π‡•à‡•§",
                                fr="Ce num√©ro est hors de port√©e.",
                                es="Ese n√∫mero est√° fuera de rango.",
                                de="Diese Nummer ist au√üerhalb des Bereichs."
                            )
                    else:
                        _speak_multilang(
                            "Sorry, I didn't understand the number.",
                            hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§Æ‡§ù ‡§™‡§æ‡§Ø‡§æ‡•§",
                            fr="D√©sol√©, je n'ai pas compris le num√©ro.",
                            es="Lo siento, no entend√≠ el n√∫mero.",
                            de="Entschuldigung, ich habe die Nummer nicht verstanden."
                        )

        except Exception as e:
            _speak_multilang(
                "Something went wrong while searching the notes.",
                hi="‡§®‡•ã‡§ü‡•ç‡§∏ ‡§ñ‡•ã‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•ã ‡§ó‡§à‡•§",
                fr="Une erreur s'est produite lors de la recherche des notes.",
                es="Algo sali√≥ mal al buscar las notas.",
                de="Beim Durchsuchen der Notizen ist ein Fehler aufgetreten."
            )
            print("‚ùå Search error:", e)


    # üßΩ Delete notes ‚Äî by number, keyword, or everything
    elif any(phrase in command for phrase in [
        "delete note", "remove note", "delete my note", "remove my note",
        "delete all notes", "remove all notes", "‡§∏‡§≠‡•Ä ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§π‡§ü‡§æ‡§ì",
        "‡§®‡•ã‡§ü ‡§π‡§ü‡§æ‡§ì", "‡§Æ‡•á‡§∞‡•Ä ‡§®‡•ã‡§ü ‡§π‡§ü‡§æ‡§ì", "supprime la note", "supprime toutes les notes",
        "borra la nota", "borra todas las notas",
        "l√∂sche die notiz", "alle notizen l√∂schen", "meine notiz l√∂schen"
    ]):
        try:
            # üå™Ô∏è Case 1: Delete ALL notes
            if "all notes" in command or "‡§∏‡§≠‡•Ä" in command or "toutes" in command or "todas" in command or "alle" in command:
                clear_all_notes()
                _speak_multilang(
                    "All notes deleted successfully.",
                    hi="‡§∏‡§≠‡•Ä ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§π‡§ü‡§æ ‡§¶‡§ø‡§è ‡§ó‡§è‡•§",
                    fr="Toutes les notes ont √©t√© supprim√©es avec succ√®s.",
                    es="Todas las notas se han eliminado con √©xito.",
                    de="Alle Notizen wurden erfolgreich gel√∂scht."
                )
            else:
                # üéØ Case 2: Delete by number
                index = None
                keyword = None

                match = re.search(r"note\s*(number\s*)?(\d+)", command)
                if match:
                    index = int(match.group(2))
                else:
                    # üîç Case 3: Delete by keyword
                    keyword = re.sub(
                        r"(delete note|remove note|delete my note|remove my note|‡§®‡•ã‡§ü ‡§π‡§ü‡§æ‡§ì|‡§Æ‡•á‡§∞‡•Ä ‡§®‡•ã‡§ü ‡§π‡§ü‡§æ‡§ì|supprime la note|borra la nota|l√∂sche die notiz|meine notiz l√∂schen)",
                        "", command, flags=re.IGNORECASE
                    ).strip()

                success = delete_specific_note(index=index, keyword=keyword)

                if success:
                    _speak_multilang(
                        "Note deleted successfully.",
                        hi="‡§®‡•ã‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§",
                        fr="Note supprim√©e avec succ√®s.",
                        es="Nota eliminada con √©xito.",
                        de="Notiz erfolgreich gel√∂scht."
                    )
                else:
                    _speak_multilang(
                        "Sorry, I couldn't find that note.",
                        hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§µ‡§π ‡§®‡•ã‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§¢‡•Ç‡§Ç‡§¢ ‡§™‡§æ‡§Ø‡§æ‡•§",
                        fr="D√©sol√©, je n'ai pas trouv√© cette note.",
                        es="Lo siento, no encontr√© esa nota.",
                        de="Entschuldigung, ich konnte die Notiz nicht finden."
                    )

        except Exception:
            _speak_multilang(
                "Something went wrong while trying to delete the note.",
                hi="‡§®‡•ã‡§ü ‡§π‡§ü‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•ã ‡§ó‡§à‡•§",
                fr="Une erreur s'est produite lors de la suppression de la note.",
                es="Algo sali√≥ mal al intentar eliminar la nota.",
                de="Beim L√∂schen der Notiz ist ein Fehler aufgetreten."
            )
    
    
    # üí¨ Chat Mode ‚Äî Friendly Responses
    elif any(kw in command for kw in [
        "how are you", "what's up", "how‚Äôs it going",
        "‡§ï‡•à‡§∏‡•á ‡§π‡•ã", "‡§ï‡•ç‡§Ø‡§æ ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à",                     # Hindi
        "comment √ßa va", "√ßa va",                       # French
        "wie geht's", "wie l√§uft's",                    # German
        "c√≥mo est√°s", "qu√© tal"                         # Spanish
    ]):
        _speak_multilang(
            "I'm doing great, Commander V. Ready for our next mission!",
            hi="‡§Æ‡•à‡§Ç ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ ‡§π‡•Ç‡§Å, ‡§ï‡§Æ‡§æ‡§Ç‡§°‡§∞ V‡•§ ‡§Ö‡§ó‡§≤‡•á ‡§Æ‡§ø‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•Ç‡§Å!",
            fr="Je vais tr√®s bien, Commandant V. Pr√™t pour notre prochaine mission !",
            de="Mir geht‚Äôs gro√üartig, Commander V. Bereit f√ºr unsere n√§chste Mission!",
            es="Estoy genial, Comandante V. ¬°Listo para la pr√≥xima misi√≥n!"
        )
    
    elif "your name" in command or "who are you" in command:
        _speak_multilang(
            "I am NOVA, your AI assistant ‚Äî designed to serve, protect, and sometimes make you laugh.",
            hi="‡§Æ‡•à‡§Ç NOVA ‡§π‡•Ç‡§Å, ‡§Ü‡§™‡§ï‡§æ AI ‡§∏‡§π‡§æ‡§Ø‡§ï ‚Äî ‡§∏‡•á‡§µ‡§æ, ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§î‡§∞ ‡§ï‡§≠‡•Ä-‡§ï‡§≠‡•Ä ‡§π‡§Ç‡§∏‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è‡•§",
            fr="Je suis NOVA, votre assistant IA ‚Äî con√ßu pour servir, prot√©ger et parfois vous faire rire.",
            de="Ich bin NOVA, dein KI-Assistent ‚Äì entwickelt, um zu helfen, zu sch√ºtzen und dich manchmal zum Lachen zu bringen.",
            es="Soy NOVA, tu asistente de IA ‚Äî creado para ayudarte, protegerte y hacerte re√≠r."
        )
    
    elif "joke" in command or "tell me a joke" in command:
        _speak_multilang(
            "Why don‚Äôt scientists trust atoms? Because they make up everything!",
            hi="‡§µ‡•à‡§ú‡•ç‡§û‡§æ‡§®‡§ø‡§ï ‡§™‡§∞‡§Æ‡§æ‡§£‡•Å‡§ì‡§Ç ‡§™‡§∞ ‡§≠‡§∞‡•ã‡§∏‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡•á? ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§µ‡•á ‡§π‡§∞ ‡§ö‡•Ä‡§ú ‡§¨‡§®‡§æ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç!",
            fr="Pourquoi les scientifiques ne font-ils pas confiance aux atomes ? Parce qu‚Äôils inventent tout !",
            de="Warum vertrauen Wissenschaftler Atomen nicht? Weil sie alles erfinden!",
            es="¬øPor qu√© los cient√≠ficos no conf√≠an en los √°tomos? ¬°Porque lo inventan todo!"
        )
        

    # ü§∑ Fallback
    else:
        _speak_multilang(
            "Sorry, I don't recognize that command yet.",
            hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§â‡§∏ ‡§Ü‡§¶‡•á‡§∂ ‡§ï‡•ã ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§Æ‡§ù ‡§™‡§æ‡§Ø‡§æ‡•§",
            fr="D√©sol√©, je ne reconnais pas encore cette commande.",
            es="Lo siento, no reconozco ese comando todav√≠a.",
            de="Entschuldigung, ich erkenne diesen Befehl noch nicht."
        )
