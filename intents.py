# -*- coding: utf-8 -*-
# intents.py
#
# Centralized phrase patterns + parsers used across voice and text paths.
# Import from here instead of re-defining in multiple files.

from difflib import SequenceMatcher
import re

# -------------------------------
# Supported languages + aliases
# -------------------------------
SUPPORTED_LANGS = {"en", "hi", "de", "fr", "es"}

LANG_ALIASES = {
    "en": ["english", "inglish", "anglais", "ingl√©s", "englisch", "angrezi"],
    "hi": ["hindi", "hindee", "‡§π‡§ø‡§Ç‡§¶‡•Ä", "hindustani", "indi", "hindhi"],
    "de": ["german", "deutsch", "doych", "jermaan", "aleman", "allemand"],
    "fr": ["french", "francais", "fran√ßais", "fransay", "fransae"],
    "es": ["spanish", "espanol", "espa√±ol", "espanyol", "espaniol"],
}

def _similar(a: str, b: str) -> float:
    return SequenceMatcher(None, a or "", b or "").ratio()

def best_alias_match(text: str, alias_map: dict, threshold: float = 0.72):
    t = (text or "").lower().strip()
    if not t:
        return None, 0.0
    # direct containment wins
    for code, words in alias_map.items():
        for w in words:
            wl = w.lower()
            if wl in t or t in wl:
                return code, 1.0
    # fuzzy fallback
    best_code, best_score = None, 0.0
    for code, words in alias_map.items():
        for w in words:
            s = _similar(t, w.lower())
            if s > best_score:
                best_code, best_score = code, s
    return (best_code, best_score) if best_score >= threshold else (None, 0.0)

def guess_language_code(utterance: str) -> str | None:
    code, _ = best_alias_match(utterance, LANG_ALIASES, threshold=0.72)
    return code

# -------------------------------
# Change-language intent
# -------------------------------
CHANGE_LANG_PATTERNS = [
    "change language", "switch language", "set language", "language change",
    "‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•ã", "‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç", "‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤",
    "sprache √§ndern", "sprache aendern",
    "changer la langue", "changer langue",
    "cambiar el idioma", "cambia idioma",
]

def said_change_language(text: str) -> bool:
    """True if the text asks to change language (contains or fuzzy ~0.75)."""
    t = (text or "").lower().strip()
    if not t:
        return False
    for p in CHANGE_LANG_PATTERNS:
        if p in t:
            return True
    return any(_similar(t, p) >= 0.75 for p in CHANGE_LANG_PATTERNS)

# -------------------------------
# Curiosity / fun content intents
# -------------------------------
TELL_ME_TRIGGERS = {
    "en": ["tell me something", "say something", "entertain me", "do something fun", "give me something", "say anything"],
    "hi": ["‡§Æ‡•Å‡§ù‡•á ‡§ï‡•Å‡§õ ‡§¨‡§§‡§æ‡§ì", "‡§ï‡•Å‡§õ ‡§ï‡§π‡•ã", "‡§Æ‡•Å‡§ù‡•á ‡§π‡§Ç‡§∏‡§æ‡§ì", "‡§ï‡•Å‡§õ ‡§Æ‡§ú‡•á‡§¶‡§æ‡§∞ ‡§ï‡§∞‡•ã", "‡§ï‡•Å‡§õ ‡§∏‡•Å‡§®‡§æ‡§ì", "‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§ï‡§π‡•ã"],
    "fr": ["dis-moi quelque chose", "dis quelque chose", "divertis-moi", "fais quelque chose de dr√¥le", "donne-moi quelque chose", "dis n'importe quoi"],
    "de": ["erz√§hl mir etwas", "sag etwas", "unterhalte mich", "mach etwas lustiges", "gib mir etwas", "sag irgendwas"],
    "es": ["dime algo", "di algo", "entret√©nme", "haz algo divertido", "dame algo", "di cualquier cosa"]
}

POSITIVE_RESPONSES = {
    "en": ["yes", "yes please", "sure", "go ahead", "alright", "let‚Äôs do it", "okay", "yeah", "ok please"],
    "hi": ["‡§π‡§æ‡§Å", "‡§π‡§æ‡§Å ‡§ï‡•É‡§™‡§Ø‡§æ", "‡§†‡•Ä‡§ï ‡§π‡•à", "‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡•ã", "‡§ö‡§≤‡•ã ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç", "‡§†‡•Ä‡§ï", "‡§π‡§æ‡§Å ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤"],
    "fr": ["oui", "oui s'il vous pla√Æt", "d'accord", "vas-y", "allons-y", "ok", "ouais"],
    "de": ["ja", "ja bitte", "sicher", "mach weiter", "in ordnung", "ok", "klar"],
    "es": ["s√≠", "s√≠ por favor", "claro", "adelante", "vamos a hacerlo", "ok", "s√≠ claro"]
}



# üìã Curiosity menu per language
CURIOSITY_MENU = {
    "en": "Would you like‚Ä¶\n‚Ä¢ A deep life insight?\n‚Ä¢ A fun fact?\n‚Ä¢ A joke?\n‚Ä¢ A cosmic riddle or quote?\n‚Ä¢ A line from a witty poem?",
    "hi": "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á‚Ä¶\n‚Ä¢ ‡§ú‡•Ä‡§µ‡§® ‡§ï‡§æ ‡§ï‡•ã‡§à ‡§ó‡§π‡§∞‡§æ ‡§µ‡§ø‡§ö‡§æ‡§∞?\n‚Ä¢ ‡§è‡§ï ‡§Æ‡§ú‡•á‡§¶‡§æ‡§∞ ‡§§‡§•‡•ç‡§Ø?\n‚Ä¢ ‡§è‡§ï ‡§ö‡•Å‡§ü‡§ï‡•Å‡§≤‡§æ?\n‚Ä¢ ‡§ï‡•ã‡§à ‡§∞‡§π‡§∏‡•ç‡§Ø‡§Æ‡§Ø ‡§™‡§π‡•á‡§≤‡•Ä ‡§Ø‡§æ ‡§â‡§¶‡•ç‡§ß‡§∞‡§£?\n‚Ä¢ ‡§è‡§ï ‡§Æ‡§ú‡•á‡§¶‡§æ‡§∞ ‡§ï‡§µ‡§ø‡§§‡§æ ‡§ï‡•Ä ‡§™‡§Ç‡§ï‡•ç‡§§‡§ø?",
    "fr": "Voulez-vous‚Ä¶\n‚Ä¢ Une r√©flexion profonde sur la vie ?\n‚Ä¢ Un fait amusant ?\n‚Ä¢ Une blague ?\n‚Ä¢ Une √©nigme ou citation cosmique ?\n‚Ä¢ Une ligne d'un po√®me dr√¥le ?",
    "de": "M√∂chten Sie‚Ä¶\n‚Ä¢ Eine tiefgr√ºndige Lebensweisheit?\n‚Ä¢ Eine interessante Tatsache?\n‚Ä¢ Einen Witz?\n‚Ä¢ Ein kosmisches R√§tsel oder Zitat?\n‚Ä¢ Eine Zeile aus einem witzigen Gedicht?",
    "es": "¬øLe gustar√≠a‚Ä¶\n‚Ä¢ Una profunda reflexi√≥n sobre la vida?\n‚Ä¢ Un dato curioso?\n‚Ä¢ Un chiste?\n‚Ä¢ Un acertijo o cita c√≥smica?\n‚Ä¢ Una l√≠nea de un poema gracioso?"
}

CURIOSITY_FOLLOWUP_ALIASES = {
    "english": {
        "tell me more", "another one", "give me another", "more please",
        "one more", "again", "hit me again", "tell another", "next one",
        "next please", "something else", "more facts", "another fact",
        "more jokes", "one more joke", "give me one more", "go again",
        "keep going", "keep them coming"
    },
    "hindi": {
        "‡§î‡§∞ ‡§¨‡§§‡§æ‡§ì", "‡§è‡§ï ‡§î‡§∞", "‡§Æ‡•Å‡§ù‡•á ‡§è‡§ï ‡§î‡§∞ ‡§¶‡•ã", "‡§î‡§∞ ‡§ö‡§æ‡§π‡§ø‡§è",
        "‡§´‡§ø‡§∞ ‡§∏‡•á", "‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ", "‡§è‡§ï ‡§î‡§∞ ‡§∏‡•Å‡§®‡§æ‡§ì", "‡§ï‡•Å‡§õ ‡§î‡§∞", "‡§Ö‡§ó‡§≤‡§æ",
        "‡§î‡§∞ ‡§§‡§•‡•ç‡§Ø", "‡§è‡§ï ‡§î‡§∞ ‡§§‡§•‡•ç‡§Ø", "‡§è‡§ï ‡§î‡§∞ ‡§ö‡•Å‡§ü‡§ï‡•Å‡§≤‡§æ", "‡§¶‡•ã‡§¨‡§∞‡§æ ‡§∏‡•Å‡§®‡§æ‡§ì"
    },
    "french": {
        "dis m'en plus", "encore un", "donne-moi un autre", "plus s'il te pla√Æt",
        "un de plus", "encore", "raconte-en un autre", "quelque chose d'autre",
        "prochain", "plus de faits", "un autre fait", "plus de blagues",
        "une autre blague", "continue", "vas-y encore"
    },
    "german": {
        "erz√§hl mir mehr", "noch eins", "gib mir noch eins", "mehr bitte",
        "eins mehr", "nochmal", "erz√§hl noch eins", "etwas anderes",
        "n√§chstes", "mehr fakten", "ein weiterer fakt", "mehr witze",
        "noch ein witz", "mach weiter", "weiter so"
    },
    "spanish": {
        "cu√©ntame m√°s", "otro m√°s", "dame otro", "m√°s por favor",
        "uno m√°s", "de nuevo", "cuenta otro", "algo m√°s", "siguiente",
        "m√°s datos", "otro dato", "m√°s chistes", "otro chiste",
        "contin√∫a", "sigue as√≠"
    }
}

LANG_CODE_TO_ALIAS = {"en": "english", "hi": "hindi", "fr": "french", "de": "german", "es": "spanish"}
LANG_CODE_TO_FULL  = {"en": "english", "hi": "hindi", "fr": "french", "de": "german", "es": "spanish"}

def is_followup_text(text: str, lang_code: str) -> bool:
    alias_key = LANG_CODE_TO_ALIAS.get(lang_code, "english")
    aliases = CURIOSITY_FOLLOWUP_ALIASES.get(alias_key, set())
    t = (text or "").lower().strip()
    if t in aliases:
        return True
    return any(a in t for a in aliases)

def parse_category_from_choice(choice_text: str, lang_code: str):
    t = (choice_text or "").lower().strip()
    if any(s in t for s in ["fun fact", "‡§Æ‡§ú‡•á‡§¶‡§æ‡§∞ ‡§§‡§•‡•ç‡§Ø", "fait amusant", "interessante tatsache", "dato curioso"]):
        return "fun_facts"
    if any(s in t for s in ["joke", "‡§ö‡•Å‡§ü‡§ï‡•Å‡§≤‡§æ", "blague", "witz", "chiste"]):
        return "jokes"
    if any(s in t for s in ["deep insight", "deep life insight", "‡§µ‡§ø‡§ö‡§æ‡§∞", "‡§ú‡•Ä‡§µ‡§®", "r√©flexion", "lebensweisheit", "reflexi√≥n"]):
        return "deep_life_insight"
    if any(s in t for s in ["riddle", "quote", "‡§™‡§π‡•á‡§≤‡•Ä", "‡§â‡§¶‡•ç‡§ß‡§∞‡§£", "√©nigme", "citation", "r√§tsel", "zitat", "acertijo", "cita", "cosmic"]):
        return "cosmic_riddles_or_quotes"
    if any(s in t for s in ["poem", "‡§ï‡§µ‡§ø‡§§‡§æ", "po√®me", "gedicht", "poema"]):
        return "witty_poems"
    return None
