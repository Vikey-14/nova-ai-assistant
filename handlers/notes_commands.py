# üìÇ handlers/notes_commands.py ‚Äî SAY‚ÜíSHOW (via say_show) + typed/voice follow-ups (UI-language aware)

from __future__ import annotations

import re
import logging
from typing import Optional, List, Dict

from memory_handler import (
    load_notes, save_note, search_notes,
    delete_specific_note, clear_all_notes, update_note
)
from say_show import say_show  # speak first (blocking), then show localized bubble

logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Lazy utils (avoid circular imports)
def _get_utils():
    from utils import selected_language, listen_command
    from followup import await_followup
    return selected_language, listen_command, await_followup

def _ui_lang() -> str:
    selected_language, *_ = _get_utils()
    return (selected_language or "en").split("-")[0].lower()

def _pick(d: Dict[str, str], **fmt) -> str:
    """Pick text for current UI lang; fallback to en; safely format."""
    txt = d.get(_ui_lang(), d.get("en", ""))
    try:
        return txt.format(**fmt) if fmt else txt
    except Exception:
        return txt

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Multilingual texts (ALL lines localized)
T = {
    # Prompts
    "ask_note_text": {
        "en": "What would you like me to note down? You can type or say it.",
        "hi": "‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§®‡•ã‡§ü ‡§ï‡§∞‡§µ‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á? ‡§Ü‡§™ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§¨‡•ã‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        "fr": "Que veux-tu que je note ? Tu peux √©crire ou parler.",
        "es": "¬øQu√© quieres que anote? Puedes escribir o hablar.",
        "de": "Was soll ich notieren? Du kannst tippen oder sprechen.",
    },
    "ask_pick_note": {
        "en": "Would you like me to read one? Type or say the note number, or say 'cancel'.",
        "hi": "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§â‡§®‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ï‡•ã‡§à ‡§è‡§ï ‡§®‡•ã‡§ü ‡§∏‡•Å‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á? ‡§®‡§Ç‡§¨‡§∞ ‡§ü‡§æ‡§á‡§™/‡§¨‡•ã‡§≤‡•á‡§Ç, ‡§Ø‡§æ 'cancel' ‡§ï‡§π‡•á‡§Ç‡•§",
        "fr": "Souhaites-tu que je lise l‚Äôune d‚Äôelles ? Dis le num√©ro de la note ou ¬´ cancel ¬ª.",
        "es": "¬øQuieres que lea una de ellas? Di el n√∫mero de la nota o di 'cancel'.",
        "de": "Soll ich eine davon vorlesen? Sage die Notiznummer oder 'cancel'.",
    },

    # Generic follow-up didn‚Äôt get it (if you want to reuse elsewhere)
    "didnt_get_it": {
        "en": "I couldn't get that.",
        "hi": "‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§à‡•§",
        "fr": "Je n‚Äôai pas compris.",
        "es": "No entend√≠ eso.",
        "de": "Ich habe das nicht verstanden.",
    },

    # Create
    "create_ok": {
        "en": "Noted successfully.",
        "hi": "‡§®‡•ã‡§ü ‡§¨‡§®‡§æ ‡§≤‡•Ä ‡§ó‡§à ‡§π‡•à‡•§",
        "fr": "Note enregistr√©e avec succ√®s.",
        "es": "Nota guardada con √©xito.",
        "de": "Notiz erfolgreich gespeichert.",
    },
    "create_fail": {
        "en": "Sorry, I couldn‚Äôt save your note.",
        "hi": "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§®‡•ã‡§ü ‡§∏‡§π‡•á‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§ï‡•Ä‡•§",
        "fr": "D√©sol√©e, je n‚Äôai pas pu enregistrer tu nota.",
        "es": "Lo siento, no he podido guardar tu nota.",
        "de": "Entschuldigung, ich konnte deine Notiz nicht speichern.",
    },

    # Read
    "read_none": {
        "en": "You have no saved notes.",
        "hi": "‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ï‡•ã‡§à ‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§",
        "fr": "Tu n‚Äôas aucune note enregistr√©e.",
        "es": "No tienes notas guardadas.",
        "de": "Du hast keine gespeicherten Notizen.",
    },
    "read_intro": {
        "en": "You have {n} notes. Reading them now.",
        "hi": "‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ {n} ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§π‡•à‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Ö‡§¨ ‡§™‡§¢‡§º ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å‡•§",
        "fr": "Tu as {n} notes. Je vais les lire maintenant.",
        "es": "Tienes {n} notas. Te las leo ahora.",
        "de": "Du hast {n} Notizen. Ich lese sie dir vor.",
    },

    # Search
    "search_none": {
        "en": "No notes found with that keyword.",
        "hi": "‡§â‡§∏ ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§∏‡•á ‡§ï‡•ã‡§à ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç‡•§",
        "fr": "Aucune note trouv√©e avec ce mot-cl√©.",
        "es": "No se encontraron notas con esa palabra clave.",
        "de": "Keine Notizen mit diesem Stichwort gefunden.",
    },
    "search_count": {
        "en": "I found {n} notes with that keyword.",
        "hi": "‡§Æ‡•Å‡§ù‡•á ‡§â‡§∏ ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§∏‡•á {n} ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à‡§Ç‡•§",
        "fr": "J‚Äôai trouv√© {n} notes avec ce mot-cl√©.",
        "es": "He encontrado {n} notas con esa palabra clave.",
        "de": "Ich habe {n} Notizen mit diesem Stichwort gefunden.",
    },
    "cancel_ok": {
        "en": "Okay, cancelled reading.",
        "hi": "‡§†‡•Ä‡§ï ‡§π‡•à, ‡§™‡§¢‡§º‡§®‡§æ ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
        "fr": "D‚Äôaccord, j‚Äôannule la lecture.",
        "es": "De acuerdo, he cancelado la lectura.",
        "de": "Okay, ich habe das Vorlesen abgebrochen.",
    },
    "out_of_range": {
        "en": "That number is out of range.",
        "hi": "‡§µ‡§π ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§∏‡•Ä‡§Æ‡§æ ‡§∏‡•á ‡§¨‡§æ‡§π‡§∞ ‡§π‡•à‡•§",
        "fr": "Ce num√©ro est hors de port√©e.",
        "es": "Ese n√∫mero est√° fuera de rango.",
        "de": "Diese Nummer ist au√üerhalb des g√ºltigen Bereichs.",
    },
    "bad_number": {
        "en": "Sorry, I didn't understand the number.",
        "hi": "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡•Ä‡•§",
        "fr": "D√©sol√©e, je n‚Äôai pas compris le num√©ro.",
        "es": "Lo siento, no entend√≠ el n√∫mero.",
        "de": "Entschuldigung, ich habe die Nummer nicht verstanden.",
    },

    # Update
    "update_ok": {
        "en": "Note updated successfully.",
        "hi": "‡§®‡•ã‡§ü ‡§ï‡•ã ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
        "fr": "Note mise √† jour avec succ√®s.",
        "es": "Nota actualizada con √©xito.",
        "de": "Notiz erfolgreich aktualisiert.",
    },
    "update_fail": {
        "en": "Sorry, I couldn't update the note.",
        "hi": "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§®‡•ã‡§ü ‡§Ö‡§™‡§°‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡•Ä‡•§",
        "fr": "D√©sol√©e, je n‚Äôai pas pu mettre √† jour la note.",
        "es": "Lo siento, no he podido actualizar la nota.",
        "de": "Entschuldigung, ich konnte die Notiz nicht aktualisieren.",
    },

    # Delete
    "delete_all_ok": {
        "en": "All notes deleted successfully.",
        "hi": "‡§∏‡§≠‡•Ä ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§π‡§ü‡§æ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡§Ç‡•§",
        "fr": "Toutes les notes ont √©t√© supprim√©es avec succ√®s.",
        "es": "Todas las notas han sido eliminadas con √©xito.",
        "de": "Alle Notizen wurden erfolgreich gel√∂scht.",
    },
    "delete_one_ok": {
        "en": "Note deleted successfully.",
        "hi": "‡§®‡•ã‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§π‡§ü‡§æ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§",
        "fr": "Note supprim√©e avec succ√®s.",
        "es": "Nota eliminada con √©xito.",
        "de": "Notiz erfolgreich gel√∂scht.",
    },
    "delete_fail": {
        "en": "Sorry, I couldn't find that note.",
        "hi": "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§µ‡§π ‡§®‡•ã‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§¢‡•Ç‡§Ç‡§¢ ‡§∏‡§ï‡•Ä‡•§",
        "fr": "D√©sol√©e, je n‚Äôai pas trouv√© cette note.",
        "es": "Lo siento, no he podido encontrar esa nota.",
        "de": "Entschuldigung, ich konnte die Notiz nicht finden.",
    },
    "delete_err": {
        "en": "Something went wrong while trying to delete the note.",
        "hi": "‡§®‡•ã‡§ü ‡§π‡§ü‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•ã ‡§ó‡§à‡•§",
        "fr": "Une erreur s‚Äôest produite lors de la suppression de la note.",
        "es": "Algo sali√≥ mal al intentar eliminar la nota.",
        "de": "Beim L√∂schen der Notiz ist ein Fehler aufgetreten.",
    },
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Create note (typed/voice follow-up; SAY‚ÜíSHOW via say_show)
def create_note(command: str) -> None:
    try:
        _, listen_command, await_followup = _get_utils()

        # SAY‚ÜíSHOW prompt
        say_show(
            T["ask_note_text"]["en"],
            hi=T["ask_note_text"]["hi"],
            fr=T["ask_note_text"]["fr"],
            es=T["ask_note_text"]["es"],
            de=T["ask_note_text"]["de"],
            title="Nova",
        )

        # Await a single barge-in/typed response (no re-say/re-show inside await)
        note_content = await_followup(
            _pick(T["ask_note_text"]),
            speak_fn=lambda *_a, **_k: None,
            show_fn=lambda *_a, **_k: None,
            listen_fn=listen_command,
            allow_typed=True,
            allow_voice=True,
            timeout=18.0
        )
        note_content = (note_content or "").strip()
        if not note_content:
            raise ValueError("Empty note content")

        save_note(note_content)
        logger.info(f"[üìù Note Created] {note_content}")

        say_show(
            T["create_ok"]["en"],
            hi=T["create_ok"]["hi"],
            fr=T["create_ok"]["fr"],
            es=T["create_ok"]["es"],
            de=T["create_ok"]["de"],
            title="Nova",
        )

    except Exception as e:
        logger.error(f"[‚ùå Note Creation Failed] {e}")
        say_show(
            T["create_fail"]["en"],
            hi=T["create_fail"]["hi"],
            fr=T["create_fail"]["fr"],
            es=T["create_fail"]["es"],
            de=T["create_fail"]["de"],
            title="Nova",
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Read all notes (SAY intro, SHOW list)
def read_notes_handler(command: str) -> None:
    notes = load_notes()
    if not notes:
        logger.info("[üìñ Read Notes] No saved notes found.")
        say_show(
            T["read_none"]["en"],
            hi=T["read_none"]["hi"],
            fr=T["read_none"]["fr"],
            es=T["read_none"]["es"],
            de=T["read_none"]["de"],
            title="Nova",
        )
        return

    logger.info(f"[üìñ Read Notes] Found {len(notes)} notes.")
    say_show(
        T["read_intro"]["en"].format(n=len(notes)),
        hi=T["read_intro"]["hi"].format(n=len(notes)),
        fr=T["read_intro"]["fr"].format(n=len(notes)),
        es=T["read_intro"]["es"].format(n=len(notes)),
        de=T["read_intro"]["de"].format(n=len(notes)),
        title="Nova",
    )

    # Build text list for bubble (contents are user text ‚Üí language-neutral)
    lines = [f"{i+1}. [{n.get('timestamp','')}] {n.get('content','')}" for i, n in enumerate(notes)]
    say_show("\n".join(lines), title="Nova")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Search notes ‚Üí list ‚Üí optional read-one follow-up
def search_notes_by_keyword(command: str) -> None:
    try:
        _, listen_command, await_followup = _get_utils()

        # Strip common triggers in multiple languages
        keyword = re.sub(
            r"(search notes|find notes|look for note|‡§®‡•ã‡§ü ‡§ñ‡•ã‡§ú‡•á‡§Ç|‡§®‡•ã‡§ü ‡§¢‡•Ç‡§Ç‡§¢‡•ã|chercher des notes|trouve des notes|buscar notas|encontrar notas|suche notizen|finde notizen)",
            "", command, flags=re.IGNORECASE
        ).strip()

        results = search_notes(keyword)
        if not results:
            logger.info(f"[üîç Search Notes] No match for keyword: {keyword}")
            say_show(
                T["search_none"]["en"],
                hi=T["search_none"]["hi"],
                fr=T["search_none"]["fr"],
                es=T["search_none"]["es"],
                de=T["search_none"]["de"],
                title="Nova",
            )
            return

        logger.info(f"[üîç Search Notes] Found {len(results)} notes for keyword: {keyword}")
        say_show(
            T["search_count"]["en"].format(n=len(results)),
            hi=T["search_count"]["hi"].format(n=len(results)),
            fr=T["search_count"]["fr"].format(n=len(results)),
            es=T["search_count"]["es"].format(n=len(results)),
            de=T["search_count"]["de"].format(n=len(results)),
            title="Nova",
        )

        # Show list
        list_lines = [f"{i+1}. [{n['timestamp']}] {n['content']}" for i, n in enumerate(results)]
        say_show("\n".join(list_lines), title="Nova")

        # Ask which to read (SAY‚ÜíSHOW once), then await without re-speaking
        say_show(
            T["ask_pick_note"]["en"],
            hi=T["ask_pick_note"]["hi"],
            fr=T["ask_pick_note"]["fr"],
            es=T["ask_pick_note"]["es"],
            de=T["ask_pick_note"]["de"],
            title="Nova",
        )
        user_reply = await_followup(
            _pick(T["ask_pick_note"]),
            speak_fn=lambda *_a, **_k: None,
            show_fn=lambda *_a, **_k: None,
            listen_fn=listen_command,
            allow_typed=True,
            allow_voice=True,
            timeout=18.0
        )
        user_reply = (user_reply or "").strip().lower()

        # Cancel in common languages
        if any(w in user_reply for w in ["cancel", "‡§ï‡•à‡§Ç‡§∏‡§ø‡§≤", "annule", "cancela", "abbrechen"]):
            logger.info("[üîç Search Cancelled by User]")
            say_show(
                T["cancel_ok"]["en"],
                hi=T["cancel_ok"]["hi"],
                fr=T["cancel_ok"]["fr"],
                es=T["cancel_ok"]["es"],
                de=T["cancel_ok"]["de"],
                title="Nova",
            )
            return

        # Extract note number
        m = re.search(r"\d+", user_reply)
        if not m:
            say_show(
                T["bad_number"]["en"],
                hi=T["bad_number"]["hi"],
                fr=T["bad_number"]["fr"],
                es=T["bad_number"]["es"],
                de=T["bad_number"]["de"],
                title="Nova",
            )
            return

        idx = int(m.group())
        if not (1 <= idx <= len(results)):
            say_show(
                T["out_of_range"]["en"],
                hi=T["out_of_range"]["hi"],
                fr=T["out_of_range"]["fr"],
                es=T["out_of_range"]["es"],
                de=T["out_of_range"]["de"],
                title="Nova",
            )
            return

        selected = results[idx - 1]['content']
        logger.info(f"[üîç Note Read] Note #{idx}: {selected}")
        say_show(selected, title="Nova")

    except Exception as e:
        logger.error(f"[‚ùå Search Failed] {e}")
        say_show(
            T["search_none"]["en"],
            hi=T["search_none"]["hi"],
            fr=T["search_none"]["fr"],
            es=T["search_none"]["es"],
            de=T["search_none"]["de"],
            title="Nova",
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Update a note (by index or first keyword match)
def update_note_handler(command: str) -> None:
    try:
        idx: Optional[int] = None
        keyword: Optional[str] = None
        new_content: Optional[str] = None

        # e.g. "update note 3 to Buy milk"
        m_idx = re.search(r"(?:update|change|edit)\s+note\s*(?:number\s*)?(\d+)\s*(?:to|into)\s+(.+)", command, re.I)
        if m_idx:
            idx = int(m_idx.group(1))
            new_content = m_idx.group(2).strip()
        else:
            # e.g. "update note shopping to Buy bread"
            m_kw = re.search(r"(?:update|change|edit)\s+note\s+(.+?)\s+(?:to|into)\s+(.+)", command, re.I)
            if m_kw:
                keyword = m_kw.group(1).strip()
                new_content = m_kw.group(2).strip()

        if not new_content or (idx is None and not keyword):
            raise ValueError("parse")

        if idx is None and keyword:
            all_notes = load_notes()
            idx = next(
                (i for i, n in enumerate(all_notes, 1)
                 if keyword.lower() in n.get("content", "").lower()),
                None
            )

        if not idx:
            raise ValueError("index")

        ok = update_note(idx, new_content)
        if not ok:
            raise ValueError("notfound")

        logger.info(f"[‚úèÔ∏è Note Updated] index={idx} ‚Üí {new_content}")
        say_show(
            T["update_ok"]["en"],
            hi=T["update_ok"]["hi"],
            fr=T["update_ok"]["fr"],
            es=T["update_ok"]["es"],
            de=T["update_ok"]["de"],
            title="Nova",
        )

    except Exception as e:
        logger.error(f"[‚ùå Update Failed] {e}")
        say_show(
            T["update_fail"]["en"],
            hi=T["update_fail"]["hi"],
            fr=T["update_fail"]["fr"],
            es=T["update_fail"]["es"],
            de=T["update_fail"]["de"],
            title="Nova",
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Delete note(s)
def delete_note_handler(command: str) -> None:
    try:
        # Delete ALL?
        if any(kw in command.lower() for kw in ["all notes", "‡§∏‡§≠‡•Ä", "toutes", "todas", "alle"]):
            clear_all_notes()
            logger.info("[‚ùå Notes Cleared] All notes deleted.")
            say_show(
                T["delete_all_ok"]["en"],
                hi=T["delete_all_ok"]["hi"],
                fr=T["delete_all_ok"]["fr"],
                es=T["delete_all_ok"]["es"],
                de=T["delete_all_ok"]["de"],
                title="Nova",
            )
            return

        # Delete by index or by keyword
        idx = None
        keyword = None

        m = re.search(r"note\s*(?:number\s*)?(\d+)", command, re.I)
        if m:
            idx = int(m.group(1))
        else:
            keyword = re.sub(
                r"(delete note|remove note|delete my note|remove my note|‡§®‡•ã‡§ü ‡§π‡§ü‡§æ‡§ì|‡§Æ‡•á‡§∞‡•Ä ‡§®‡•ã‡§ü ‡§π‡§ü‡§æ‡§ì|supprime la note|borra la nota|l√∂sche die notiz|meine notiz l√∂schen)",
                "", command, flags=re.IGNORECASE
            ).strip()

        success = delete_specific_note(index=idx, keyword=keyword)

        if success:
            logger.info(f"[‚ùå Note Deleted] index={idx} | keyword={keyword}")
            say_show(
                T["delete_one_ok"]["en"],
                hi=T["delete_one_ok"]["hi"],
                fr=T["delete_one_ok"]["fr"],
                es=T["delete_one_ok"]["es"],
                de=T["delete_one_ok"]["de"],
                title="Nova",
            )
        else:
            say_show(
                T["delete_fail"]["en"],
                hi=T["delete_fail"]["hi"],
                fr=T["delete_fail"]["fr"],
                es=T["delete_fail"]["es"],
                de=T["delete_fail"]["de"],
                title="Nova",
            )

    except Exception as e:
        logger.error(f"[‚ùå Delete Failed] {e}")
        say_show(
            T["delete_err"]["en"],
            hi=T["delete_err"]["hi"],
            fr=T["delete_err"]["fr"],
            es=T["delete_err"]["es"],
            de=T["delete_err"]["de"],
            title="Nova",
        )
