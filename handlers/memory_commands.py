# üìÇ handlers/memory_commands.py ‚Äî SAY‚ÜíSHOW + typed/voice follow-ups + multilingual + barge-in

import re
from typing import Optional

from memory_handler import save_to_memory, load_from_memory, clear_memory

# Central SAY‚ÜíSHOW and follow-ups
from say_show import say_show
from followup import await_followup
from utils import selected_language, listen_command, logger


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Localization helpers
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _lang() -> str:
    return (selected_language or "en").lower()

def _pick(d: dict) -> str:
    return d.get(_lang(), d.get("en", ""))

# Multilingual follow-up prompts / messages
_PROMPTS = {
    "ask_name": {
        "en": "What name should I remember? You can type or say it.",
        "hi": "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•å‡§®-‡§∏‡§æ ‡§®‡§æ‡§Æ ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è? ‡§Ü‡§™ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§ï‡•á ‡§Ø‡§æ ‡§¨‡•ã‡§≤‡§ï‡§∞ ‡§¨‡§§‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        "de": "Welchen Namen soll ich mir merken? Du kannst tippen oder sprechen.",
        "fr": "Quel nom dois-je m√©moriser ? Vous pouvez √©crire ou parler.",
        "es": "¬øQu√© nombre debo recordar? Puedes escribir o hablar.",
    },
    "ask_value": {
        "en": "What should I remember? You can type or say it.",
        "hi": "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è? ‡§Ü‡§™ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§ï‡•á ‡§Ø‡§æ ‡§¨‡•ã‡§≤‡§ï‡§∞ ‡§¨‡§§‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        "de": "Was soll ich mir merken? Du kannst tippen oder sprechen.",
        "fr": "Que dois-je m√©moriser ? Vous pouvez √©crire ou parler.",
        "es": "¬øQu√© debo recordar? Puedes escribir o hablar.",
    },
    "ask_update_target": {
        "en": "Tell me what to update ‚Äî your name or a preference?",
        "hi": "‡§¨‡§§‡§æ‡§á‡§è ‡§ï‡•ç‡§Ø‡§æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§π‡•à ‚Äî ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§™‡§∏‡§Ç‡§¶?",
        "de": "Was soll ich aktualisieren ‚Äî deinen Namen oder eine Vorliebe?",
        "fr": "Que dois-je mettre √† jour ‚Äî votre nom ou une pr√©f√©rence ?",
        "es": "¬øQu√© debo actualizar: tu nombre o alguna preferencia?",
    },
    "ask_clear_which": {
        "en": "What should I forget ‚Äî your name, a preference, or everything?",
        "hi": "‡§ï‡•ç‡§Ø‡§æ ‡§≠‡•Ç‡§≤‡§®‡§æ ‡§π‡•à ‚Äî ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ, ‡§ï‡•ã‡§à ‡§™‡§∏‡§Ç‡§¶, ‡§Ø‡§æ ‡§∏‡§¨ ‡§ï‡•Å‡§õ?",
        "de": "Was soll ich vergessen ‚Äî deinen Namen, eine Vorliebe oder alles?",
        "fr": "Que dois-je oublier ‚Äî votre nom, une pr√©f√©rence ou tout ?",
        "es": "¬øQu√© debo olvidar: tu nombre, una preferencia o todo?",
    },
    "didnt_get_it": {
        "en": "I couldn't get that.",
        "hi": "‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§à‡•§",
        "de": "Ich habe das nicht verstanden.",
        "fr": "Je n‚Äôai pas compris.",
        "es": "No entend√≠ eso.",
    },
}

def _say_then_show_prompt(key: str) -> str:
    """Speak all locales, then show the bubble in current UI language; return localized prompt text."""
    p = _PROMPTS[key]
    say_show(p["en"], hi=p.get("hi"), de=p.get("de"), fr=p.get("fr"), es=p.get("es"), title="Nova")
    return _pick(p)

def _say_msg(en: str, *, hi: str = "", de: str = "", fr: str = "", es: str = ""):
    """Helper to SAY‚ÜíSHOW a one-off localized message."""
    say_show(en, hi=hi, de=de, fr=fr, es=es, title="Nova")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Name extraction (kept; minor guard tweaks)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def extract_name(command: str) -> Optional[str]:
    command = (command or "").strip()
    patterns = [
        r"(?:\bmy\s+name\s+is\b|\bi\s+am\b|\bi‚Äôm\b|\bi\s+am\s+called\b|\bcall\s+me\b|je m'appelle|me llamo|ich hei√üe|mein name ist|‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ)\s+([a-zA-Z√Ä-√ø\u0900-\u097F][\w√Ä-√ø\u0900-\u097F\-']+)",
        r"(?:update|change|set)\s+(?:my\s+)?name\s+(?:to|as)?\s*([a-zA-Z√Ä-√ø\u0900-\u097F][\w√Ä-√ø\u0900-\u097F\-']+)",
        r"^\s*([A-Za-z√Ä-√ø\u0900-\u097F][\w√Ä-√ø\u0900-\u097F\-']{1,})\s*$",
    ]
    for pattern in patterns:
        m = re.search(pattern, command, flags=re.IGNORECASE)
        if m:
            name = (m.group(1) or "").strip()
            if name.lower() in {"yes", "no", "ok", "okay"}:
                continue
            return name
    return None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Remember / Update Name (with follow-up if missing)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def handle_remember_name(command: str):
    name = extract_name(command)

    if not name:
        prompt = _say_then_show_prompt("ask_name")
        answer = await_followup(
            prompt,
            speak_fn=lambda *_a, **_k: None,   # no re-TTS (we already said it)
            show_fn=lambda *_a, **_k: None,    # no duplicate bubble
            listen_fn=listen_command,          # barge-in handled inside await_followup
            allow_typed=True, allow_voice=True, timeout=18.0
        )
        if not answer:
            p = _PROMPTS["didnt_get_it"]
            _say_msg(p["en"], hi=p["hi"], de=p["de"], fr=p["fr"], es=p["es"])
            return
        name = extract_name(answer) or (answer or "").strip()

    if not name:
        _say_msg(
            "Sorry, I couldn't catch your name.",
            hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§Æ‡§ù ‡§™‡§æ‡§à‡•§",
            fr="D√©sol√©, je n'ai pas compris votre nom.",
            es="Lo siento, no entend√≠ tu nombre.",
            de="Entschuldigung, ich habe deinen Namen nicht verstanden.",
        )
        return

    save_to_memory("name", name)
    logger.info(f"üß† Name remembered: {name}")
    # Localized confirmation (SAY‚ÜíSHOW)
    _say_msg(
        f"Got it ‚Äî I‚Äôll call you {name} from now on.",
        hi=f"‡§†‡•Ä‡§ï ‡§π‡•à ‚Äî ‡§Ö‡§¨ ‡§∏‡•á ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã {name} ‡§ï‡§π‡•Ç‡§Å‡§ó‡•Ä‡•§",
        fr=f"D'accord ‚Äî je vous appellerai {name} d√©sormais.",
        es=f"Entendido ‚Äî te llamar√© {name} de ahora en adelante.",
        de=f"Alles klar ‚Äî ich nenne dich ab jetzt {name}.",
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Recall Name
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def handle_recall_name(command: str):
    name = load_from_memory("name")
    if name:
        _say_msg(
            f"Your name is {name}.",
            hi=f"‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ {name} ‡§π‡•à‡•§",
            fr=f"Votre nom est {name}.",
            es=f"Tu nombre es {name}.",
            de=f"Dein Name ist {name}.",
        )
    else:
        _say_msg(
            "I don‚Äôt know your name yet. You can tell me by saying ‚ÄúMy name is ‚Ä¶‚Äù.",
            hi="‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§≠‡•Ä ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§™‡§§‡§æ‡•§ ‡§Ü‡§™ ‡§ï‡§π ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡§Ç, ‚Äú‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ ‚Ä¶ ‡§π‡•à‚Äù„ÄÇ",
            fr="Je ne connais pas encore votre nom. Vous pouvez dire ¬´ Je m'appelle ‚Ä¶ ¬ª.",
            es="A√∫n no s√© tu nombre. Puedes decir ¬´ Me llamo ‚Ä¶ ¬ª.",
            de="Ich kenne deinen Namen noch nicht. Du kannst sagen: ‚ÄûIch hei√üe ‚Ä¶‚Äú.",
        )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Store Preference (with follow-up if missing)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _extract_preference_text(command: str) -> str:
    return re.sub(
        r"(i like|i love|my favorite|‡§Æ‡•Å‡§ù‡•á ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à|‡§Æ‡•á‡§∞‡§æ ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ|j'aime|mon pr√©f√©r√©|me gusta|mi favorito|ich mag|mein lieblings)",
        "",
        command or "",
        flags=re.IGNORECASE,
    ).strip()

def handle_store_preference(command: str):
    try:
        preference = _extract_preference_text(command)

        if not preference:
            prompt = _say_then_show_prompt("ask_value")
            answer = await_followup(
                prompt,
                speak_fn=lambda *_a, **_k: None,
                show_fn=lambda *_a, **_k: None,
                listen_fn=listen_command,
                allow_typed=True, allow_voice=True, timeout=18.0
            )
            if not answer:
                p = _PROMPTS["didnt_get_it"]; _say_msg(p["en"], hi=p["hi"], de=p["de"], fr=p["fr"], es=p["es"])
                return
            preference = _extract_preference_text(answer) or (answer or "").strip()

        if not preference:
            raise ValueError("Empty preference")

        save_to_memory("preference", preference)
        logger.info(f"üß† Preference stored: {preference}")
        _say_msg(
            f"Got it! I‚Äôll remember that you like {preference}.",
            hi=f"‡§∏‡§Æ‡§ù ‡§ó‡§à! ‡§Æ‡•à‡§Ç ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•Ç‡§Å‡§ó‡•Ä ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã {preference} ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à‡•§",
            fr=f"Compris ! Je me souviendrai que vous aimez {preference}.",
            es=f"¬°Entendido! Recordar√© que te gusta {preference}.",
            de=f"Alles klar! Ich werde mir merken, dass du {preference} magst.",
        )

    except Exception as e:
        logger.error(f"‚ùå Failed to store preference: {e}")
        _say_msg(
            "Sorry, I couldn't understand your preference.",
            hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§∏‡§Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§Æ‡§ù ‡§™‡§æ‡§à‡•§",
            fr="D√©sol√©, je n'ai pas compris votre pr√©f√©rence.",
            es="Lo siento, no entend√≠ tu preferencia.",
            de="Entschuldigung, ich habe deine Vorliebe nicht verstanden.",
        )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Clear Memory (with follow-up if unclear key)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def handle_clear_memory(command: str):
    try:
        cmd = (command or "").lower()

        # Quick ‚Äúeverything‚Äù paths
        if any(phrase in cmd for phrase in ["everything", "‡§∏‡§¨ ‡§ï‡•Å‡§õ", "tout", "todo", "alles"]):
            clear_memory()
            logger.info("üß† Cleared entire memory")
            _say_msg(
                "Memory cleared completely.",
                hi="‡§∏‡§æ‡§∞‡•Ä ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§π‡§ü‡§æ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§",
                fr="La m√©moire a √©t√© compl√®tement effac√©e.",
                es="La memoria se ha borrado completamente.",
                de="Der gesamte Speicher wurde gel√∂scht.",
            )
            return

        key = None
        if any(k in cmd for k in ["name", "‡§®‡§æ‡§Æ", "nom", "nombre"]):
            key = "name"
        elif any(k in cmd for k in ["preference", "‡§™‡§∏‡§Ç‡§¶", "pr√©f√©rence", "preferencia", "vorliebe"]):
            key = "preference"

        # Ask once if still unclear
        if not key:
            prompt = _say_then_show_prompt("ask_clear_which")
            ans = await_followup(
                prompt,
                speak_fn=lambda *_a, **_k: None,
                show_fn=lambda *_a, **_k: None,
                listen_fn=listen_command,
                allow_typed=True, allow_voice=True, timeout=18.0
            )
            if not ans:
                p = _PROMPTS["didnt_get_it"]; _say_msg(p["en"], hi=p["hi"], de=p["de"], fr=p["fr"], es=p["es"])
                return
            al = (ans or "").lower()
            if "name" in al or "‡§®‡§æ‡§Æ" in al or "nom" in al or "nombre" in al:
                key = "name"
            elif "preference" in al or "‡§™‡§∏‡§Ç‡§¶" in al or "pr√©f√©rence" in al or "preferencia" in al or "vorliebe" in al:
                key = "preference"
            elif "everything" in al or "‡§∏‡§¨ ‡§ï‡•Å‡§õ" in al or "tout" in al or "todo" in al or "alles" in al:
                key = "everything"

        if key == "everything":
            clear_memory()
            logger.info("üß† Cleared entire memory (via follow-up)")
            _say_msg(
                "Memory cleared completely.",
                hi="‡§∏‡§æ‡§∞‡•Ä ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§π‡§ü‡§æ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§",
                fr="La m√©moire a √©t√© compl√®tement effac√©e.",
                es="La memoria se ha borrado completamente.",
                de="Der gesamte Speicher wurde gel√∂scht.",
            )
            return

        if key:
            clear_memory(key)
            logger.info(f"üß† Cleared memory key: {key}")
            _say_msg(
                f"I've forgotten your {key}.",
                hi=f"‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ü‡§™‡§ï‡•Ä {key} ‡§ï‡•ã ‡§≠‡•Å‡§≤‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§π‡•à‡•§",
                fr=f"J'ai oubli√© votre {key}.",
                es=f"He olvidado tu {key}.",
                de=f"Ich habe deine {key} vergessen.",
            )
        else:
            raise ValueError("Unknown key")

    except Exception as e:
        logger.error(f"‚ùå Error clearing memory: {e}")
        _say_msg(
            "Sorry, I couldn't clear the memory properly.",
            hi="‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§∏‡§æ‡§´‡§º ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§™‡§æ‡§à‡•§",
            fr="D√©sol√©, je n'ai pas pu effacer la m√©moire.",
            es="Lo siento, no pude borrar la memoria.",
            de="Entschuldigung, ich konnte den Speicher nicht l√∂schen.",
        )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Note delegates (unchanged behavior; just logged)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def handle_take_note(command: str):
    logger.info("üìù Delegating to core engine: create note")
    from core_engine import process_command
    process_command(f"create note {command}")

def handle_read_notes(command: str):
    logger.info("üìñ Delegating to core engine: read notes")
    from core_engine import process_command
    process_command("read notes")

def handle_delete_notes(command: str):
    logger.info("‚ùå Delegating to core engine: delete note")
    from core_engine import process_command
    process_command(f"delete note {command}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Update Memory (name or preference) ‚Äî with follow-ups where needed
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def handle_update_memory(command: str):
    cmd = (command or "").strip()
    low = cmd.lower()

    # 1) Mentions of name across languages ‚Üí reuse name path
    if any(k in low for k in ["name", "‡§®‡§æ‡§Æ", "nom", "nombre", "mein name", "je m'appelle", "me llamo", "ich hei√üe"]):
        return handle_remember_name(cmd)

    # 2) Explicit preference update patterns
    m = re.search(
        r"(?:update|change|set)\s+(?:my\s+)?(?:favorite|preference)\s+(?:to|as)?\s*(.+)$",
        cmd, flags=re.IGNORECASE
    )
    if m:
        pref = (m.group(1) or "").strip()
        if not pref:
            prompt = _say_then_show_prompt("ask_value")
            ans = await_followup(
                prompt,
                speak_fn=lambda *_a, **_k: None,
                show_fn=lambda *_a, **_k: None,
                listen_fn=listen_command,
                allow_typed=True, allow_voice=True, timeout=18.0
            )
            if not ans:
                p = _PROMPTS["didnt_get_it"]; _say_msg(p["en"], hi=p["hi"], de=p["de"], fr=p["fr"], es=p["es"])
                return
            pref = _extract_preference_text(ans) or (ans or "").strip()

        save_to_memory("preference", pref)
        logger.info(f"üß† Preference updated: {pref}")
        _say_msg(
            f"Done! I‚Äôll remember you prefer {pref}.",
            hi=f"‡§π‡•ã ‡§ó‡§Ø‡§æ! ‡§Æ‡•à‡§Ç ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•Ç‡§Å‡§ó‡•Ä ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã {pref} ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à‡•§",
            fr=f"C‚Äôest fait ! Je retiens que vous pr√©f√©rez {pref}.",
            es=f"¬°Listo! Recordar√© que prefieres {pref}.",
            de=f"Erledigt! Ich merke mir, dass du {pref} bevorzugst.",
        )
        return

    # 3) ‚ÄúLiking‚Äù statements ‚Üí reuse preference path
    like_triggers = (
        "i like", "i love", "my favorite",
        "‡§Æ‡•Å‡§ù‡•á ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à", "‡§Æ‡•á‡§∞‡§æ ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ",
        "j'aime", "mon pr√©f√©r√©",
        "me gusta", "mi favorito",
        "ich mag", "mein lieblings",
    )
    if any(t in low for t in like_triggers):
        return handle_store_preference(cmd)

    # 4) Still unclear ‚Üí ask what to update
    prompt = _say_then_show_prompt("ask_update_target")
    ans = await_followup(
        prompt,
        speak_fn=lambda *_a, **_k: None,
        show_fn=lambda *_a, **_k: None,
        listen_fn=listen_command,
        allow_typed=True, allow_voice=True, timeout=18.0
    )
    if not ans:
        p = _PROMPTS["didnt_get_it"]; _say_msg(p["en"], hi=p["hi"], de=p["de"], fr=p["fr"], es=p["es"])
        return
    al = ans.lower()
    if "name" in al or "‡§®‡§æ‡§Æ" in al or "nom" in al or "nombre" in al:
        return handle_remember_name("")     # triggers name follow-up
    if "preference" in al or "‡§™‡§∏‡§Ç‡§¶" in al or "pr√©f√©rence" in al or "preferencia" in al or "vorliebe" in al:
        return handle_store_preference("")  # triggers value follow-up

    p = _PROMPTS["didnt_get_it"]; _say_msg(p["en"], hi=p["hi"], de=p["de"], fr=p["fr"], es=p["es"])
