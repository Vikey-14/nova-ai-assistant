# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Linux build (.deb)

on:
  workflow_dispatch:
  push:
    tags: ["v*"]

jobs:
  # ==================== AMD64 (.deb) ====================
  build-amd64:
    if: ${{ !contains(github.event.head_commit.message, '[skip-amd64]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Sanitize ref for artifact names (replace / with -)
      - name: Sanitize ref for artifact names
        shell: bash
        run: echo "SAFE_REF=${GITHUB_REF_NAME//\//-}" >> "$GITHUB_ENV"

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: System deps (build + runtime)
        run: |
          set -euo pipefail
          sudo apt-get -qq update
          sudo apt-get -yqq install \
            build-essential python3-dev pkg-config git curl \
            libsndfile1 libsndfile1-dev \
            espeak-ng espeak-ng-data libespeak-ng1 libespeak-ng-dev \
            portaudio19-dev libportaudio2 libportaudiocpp0 \
            libasound2-dev libjack-jackd2-dev \
            ffmpeg libpulse0 desktop-file-utils
          sudo apt-get -yqq install libasound2 || sudo apt-get -yqq install libasound2t64
          sudo apt-get -yqq install python3.11-tk || sudo apt-get -yqq install python3-tk

      - name: Python deps
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.linux.txt pyinstaller

      # Use the Piper already in the repo for amd64
      - name: Piper smoke test (repo amd64)
        run: |
          set -euo pipefail
          BIN="third_party/piper/linux-x64/piper"
          M="third_party/piper/models/en_US-ryan-medium.onnx"
          C="third_party/piper/models/en_US-ryan-medium.onnx.json"
          if [ -x "$BIN" ] && [ -f "$M" ] && [ -f "$C" ]; then
            echo "Hello from Nova" | "$BIN" -m "$M" -c "$C" -s 0 -f /tmp/smoke_amd64.wav
            test -s /tmp/smoke_amd64.wav
            file /tmp/smoke_amd64.wav || true
            echo "Piper amd64 smoke OK"
          else
            echo "::warning::amd64 Piper/models missing; skipping smoke."
          fi

      - name: Build with PyInstaller (Linux amd64)
        run: |
          set -euo pipefail
          pyinstaller --distpath dist_linux NOVA_Linux.spec
          ls -lah dist_linux || true

      - name: Build .deb (amd64)
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF:-}" =~ ^refs/tags/v ]]; then
            APPVER="${GITHUB_REF_NAME#v}"
          else
            RUN_NO="${GITHUB_RUN_NUMBER:-0}"
            SHORT_SHA="$(echo "${GITHUB_SHA:-0000000}" | cut -c1-7)"
            APPVER="0.0.0~ci.${RUN_NO}.${SHORT_SHA}"
          fi
          echo "Using APPVER=${APPVER}"
          bash pack_deb.sh "${APPVER}-1" amd64
          ls -lah dist_linux | grep -E 'amd64\.deb$' || true

      - name: Install & verify (smoke test)
        run: |
          set -euo pipefail
          sudo apt-get -yqq install ./dist_linux/*_amd64.deb
          test -f /usr/share/applications/nova.desktop
          test -f /etc/xdg/autostart/nova-tray.desktop
          echo "Linux amd64 .deb installed & basic files present."

      - name: Upload artifact (.deb amd64)
        uses: actions/upload-artifact@v4
        with:
          name: Nova-linux-amd64-${{ env.SAFE_REF }}
          path: |
            dist_linux/*_amd64.deb
            dist_linux/nova_ai_assistant_amd64.deb
          if-no-files-found: error
          compression-level: 0

  # ==================== ARM64 (.deb) ====================
  build-arm64:
    runs-on: ubuntu-latest
    env:
      PIPER_REF: "v1.2.0" # Piper tag
      PIPER_PHONEMIZE_TAG: "v1.1.0" # piper-phonemize repo tag
    steps:
      - uses: actions/checkout@v4

      - name: Sanitize ref for artifact names
        shell: bash
        run: echo "SAFE_REF=${GITHUB_REF_NAME//\//-}" >> "$GITHUB_ENV"

      - name: Create hashed.txt from secret
        env:
          HASHED_NAME_BLOCKLIST: ${{ secrets.HASHED_NAME_BLOCKLIST }}
        run: |
          set -euo pipefail
          [ -n "${HASHED_NAME_BLOCKLIST:-}" ] || { echo "::error::HASHED_NAME_BLOCKLIST is empty"; exit 1; }
          printf '%s\n' "$HASHED_NAME_BLOCKLIST" > hashed.txt
          echo "hashed.txt lines: $(wc -l < hashed.txt)"

      - name: Build arm64 inside container
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          shell: /bin/bash
          env: |
            PIPER_REF: ${{ env.PIPER_REF }}
            PIPER_PHONEMIZE_TAG: ${{ env.PIPER_PHONEMIZE_TAG }}
          install: |
            apt-get -qq update
            DEBIAN_FRONTEND=noninteractive apt-get -yqq install \
              build-essential python3 python3-dev python3-pip pkg-config git curl \
              libsndfile1 libsndfile1-dev \
              portaudio19-dev libportaudio2 libportaudiocpp0 python3-pyaudio \
              libasound2-dev libjack-jackd2-dev \
              ffmpeg libpulse0 desktop-file-utils python3-tk \
              cmake ninja-build meson \
              libspdlog-dev libfmt-dev
            python3 -m pip install --upgrade pip wheel
          run: |
            set -euo pipefail

            # Always operate from the repo root so paths resolve
            cd "${GITHUB_WORKSPACE:?}" || { echo "::error::GITHUB_WORKSPACE missing"; exit 1; }

            : "${PIPER_REF:=v1.2.0}"
            : "${PIPER_PHONEMIZE_TAG:=v1.1.0}"

            # ---- Python deps (avoid building PyAudio from pip)
            grep -vi '^pyaudio' requirements.linux.txt > /tmp/req_arm.txt
            python3 -m pip install -r /tmp/req_arm.txt pyinstaller

            # ---- ONNX Runtime (CPU, aarch64)
            ORT_VERSION="${ORT_VERSION:-1.14.1}"
            ORT_ROOT="/opt/onnxruntime"
            mkdir -p "${ORT_ROOT}"
            curl -L --fail -o /tmp/onnxruntime.tgz \
              "https://github.com/microsoft/onnxruntime/releases/download/v${ORT_VERSION}/onnxruntime-linux-aarch64-${ORT_VERSION}.tgz"
            tar -xzf /tmp/onnxruntime.tgz -C "${ORT_ROOT}" --strip-components=1
            INC1="${ORT_ROOT}/include"
            INC2="${ORT_ROOT}/include/onnxruntime/core/session"
            LIBDIR="${ORT_ROOT}/lib"
            export CPLUS_INCLUDE_PATH="${INC1}:${INC2}:${CPLUS_INCLUDE_PATH:-}"
            export LIBRARY_PATH="${LIBDIR}:${LIBRARY_PATH:-}"
            export LD_LIBRARY_PATH="${LIBDIR}:${LD_LIBRARY_PATH:-}"

            # ---- eSpeak-NG from source (newer API needed)
            ESRC="/tmp/espeak_src"; EBLD="/tmp/espeak_build"
            git clone --depth=1 https://github.com/espeak-ng/espeak-ng.git "${ESRC}"
            meson setup "${EBLD}" "${ESRC}" --buildtype=release -Dsonic=disabled
            ninja -C "${EBLD}"
            ninja -C "${EBLD}" install
            ldconfig
            export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:${PKG_CONFIG_PATH:-}"

            # ---- piper-phonemize (build lib + headers; pass ONNX paths)
            git clone --depth=1 --branch "${PIPER_PHONEMIZE_TAG}" https://github.com/rhasspy/piper-phonemize.git /tmp/piper_ph
            cmake -S /tmp/piper_ph -B /tmp/piper_ph_build \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_PREFIX_PATH="${ORT_ROOT}" \
              -DONNXRUNTIME_ROOT="${ORT_ROOT}"
            cmake --build /tmp/piper_ph_build --config Release -j

            PHONEME_HPP="$(find /tmp/piper_ph -type f -name phoneme_ids.hpp -print -quit || true)"
            PHONEME_DIR="$(dirname "${PHONEME_HPP}")"
            PHONEME_LIB="$(find /tmp/piper_ph_build -type f -name 'libpiper_phonemize.so*' -print -quit || true)"
            if [ -z "${PHONEME_HPP}" ] || [ ! -f "${PHONEME_HPP}" ]; then
              echo "::error::phoneme_ids.hpp not found in piper-phonemize"
              exit 1
            fi
            if [ -z "${PHONEME_LIB}" ] || [ ! -f "${PHONEME_LIB}" ]; then
              echo "::group::piper-phonemize build tree (debug)"; ls -laR /tmp/piper_ph_build | sed 's/^/  /'; echo "::endgroup::"
              echo "::error::libpiper_phonemize not built"
              exit 1
            fi
            echo "Using header: ${PHONEME_HPP}"
            echo "Using library: ${PHONEME_LIB}"

            # ---- Piper (arm64)
            HOST_DIR="third_party/piper/linux-arm64"
            rm -rf "$HOST_DIR" && mkdir -p "$HOST_DIR"

            git clone --depth=1 --branch "${PIPER_REF}" https://github.com/rhasspy/piper.git /tmp/piper_src

            # Include dirs and link flags
            CXXFLAGS="-I${INC1} -I${INC2} -I${PHONEME_DIR}"
            cp -fv "${PHONEME_HPP}" /tmp/piper_src/src/cpp/ || true
            LDFLAGS="-L${LIBDIR} -L$(dirname "${PHONEME_LIB}") -lonnxruntime -lpiper_phonemize"

            # Detect CMake root
            if [ -f /tmp/piper_src/CMakeLists.txt ]; then
              SRC_DIR=/tmp/piper_src
            elif [ -f /tmp/piper_src/src/CMakeLists.txt ]; then
              SRC_DIR=/tmp/piper_src/src
            elif [ -f /tmp/piper_src/src/cpp/CMakeLists.txt ]; then
              SRC_DIR=/tmp/piper_src/src/cpp
            else
              echo "::error::No CMakeLists.txt found in piper repo" >&2
              ls -la /tmp/piper_src || true
              exit 1
            fi

            cmake -S "${SRC_DIR}" -B /tmp/piper_build \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
              -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}"
            cmake --build /tmp/piper_build --config Release -j

            # Copy out binary + libs and create SONAME symlink
            if [ -x /tmp/piper_build/piper ]; then
              cp -av /tmp/piper_build/piper "$HOST_DIR/piper"
            else
              BIN_CANDIDATE="$(find /tmp/piper_build -maxdepth 3 -type f -name piper -perm -111 | head -n1 || true)"
              [ -n "$BIN_CANDIDATE" ] && cp -av "$BIN_CANDIDATE" "$HOST_DIR/piper"
            fi
            chmod +x "$HOST_DIR/piper"

            cp -av "${LIBDIR}"/libonnxruntime.so* "$HOST_DIR/" 2>/dev/null || true
            cp -av "${PHONEME_LIB}" "$HOST_DIR/" 2>/dev/null || true
            # ensure libpiper_phonemize.so resolves; create generic symlink
            if [ -f "$HOST_DIR/$(basename "${PHONEME_LIB}")" ]; then
              base="$(basename "${PHONEME_LIB}")"
              ln -sf "$base" "$HOST_DIR/libpiper_phonemize.so"
            fi

            # Link check with local rpath
            LD_LIBRARY_PATH="$HOST_DIR:${LD_LIBRARY_PATH:-}" "$HOST_DIR/piper" -h >/dev/null || true
            echo "piper (arm64) links OK"

            # ---- Build Nova (arm64) — find the spec robustly
            SPEC=""
            if [ -f "NOVA_Linux.spec" ]; then
              SPEC="NOVA_Linux.spec"
            elif [ -f "nova_ai_assistant/NOVA_Linux.spec" ]; then
              SPEC="nova_ai_assistant/NOVA_Linux.spec"
            else
              SPEC="$(git ls-files | grep -m1 -E '/?NOVA_Linux\.spec$' || true)"
            fi
            if [ -z "$SPEC" ] || [ ! -f "$SPEC" ]; then
              echo "::error::NOVA_Linux.spec not found anywhere in the repo"
              echo "Repo root contents:"; ls -la
              exit 1
            fi
            echo "Using spec: $SPEC"
            pyinstaller --distpath dist_linux "$SPEC"
            ls -lah dist_linux || true

            # ---- Build .deb (arm64)
            if [[ "${GITHUB_REF:-}" =~ ^refs/tags/v ]]; then
              APPVER="${GITHUB_REF_NAME#v}"
            else
              RUN_NO="${GITHUB_RUN_NUMBER:-0}"
              SHORT_SHA="$(echo "${GITHUB_SHA:-0000000}" | cut -c1-7)"
              APPVER="0.0.0~ci.${RUN_NO}.${SHORT_SHA}"
            fi
            echo "Using APPVER=${APPVER}"
            ARCH=arm64 bash pack_deb.sh "${APPVER}-1" arm64
            ls -lah dist_linux | grep -E 'arm64\.deb$' || true

      - name: Upload linux arm64 piper (raw)
        uses: actions/upload-artifact@v4
        with:
          name: piper-linux-arm64-${{ env.SAFE_REF }}
          path: third_party/piper/linux-arm64/piper
          if-no-files-found: error
          compression-level: 0

      - name: Upload artifact (.deb arm64)
        uses: actions/upload-artifact@v4
        with:
          name: Nova-linux-arm64-${{ env.SAFE_REF }}
          path: |
            dist_linux/*_arm64.deb
            dist_linux/nova_ai_assistant_arm64.deb
          if-no-files-found: error
          compression-level: 0

  # ==================== Release (attach both) ====================
  release:
    needs: [build-amd64, build-arm64]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: Nova-linux-*
          merge-multiple: true
          path: release_assets

      - name: List downloaded files (debug)
        run: |
          echo "::group::release_assets tree"
          ls -laR release_assets || true
          echo "::endgroup::"

      - name: Make stable copies + checksums
        run: |
          set -e
          cd release_assets
          cp -f $(find . -name '*_amd64.deb' | head -n1) nova_ai_assistant_amd64.deb
          cp -f $(find . -name '*_arm64.deb' | head -n1) nova_ai_assistant_arm64.deb
          shasum -a 256 * > SHA256SUMS.txt || true
          ls -la

      - name: Create/Update GitHub Release (attach .debs)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Nova ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            release_assets/**/*.deb
            release_assets/SHA256SUMS.txt
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
