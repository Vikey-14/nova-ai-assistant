# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Linux build (.deb)

on:
  workflow_dispatch:
  push:
    tags: ["v*"]

jobs:
  # ==================== AMD64 (.deb) ====================
  build-amd64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: System deps (build + runtime)
        run: |
          set -euo pipefail
          sudo apt-get -qq update
          sudo apt-get -yqq install \
            build-essential python3-dev pkg-config git curl \
            libsndfile1 libsndfile1-dev \
            espeak-ng espeak-ng-data libespeak-ng1 libespeak-ng-dev \
            portaudio19-dev libportaudio2 libportaudiocpp0 \
            libasound2-dev libjack-jackd2-dev \
            ffmpeg libpulse0 desktop-file-utils
          sudo apt-get -yqq install libasound2 || sudo apt-get -yqq install libasound2t64
          sudo apt-get -yqq install python3.11-tk || sudo apt-get -yqq install python3-tk

      - name: Python deps
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.linux.txt pyinstaller

      - name: Create hashed.txt from secret
        env:
          HASHED_NAME_BLOCKLIST: ${{ secrets.HASHED_NAME_BLOCKLIST }}
        run: |
          set -euo pipefail
          [ -n "${HASHED_NAME_BLOCKLIST:-}" ] || { echo "::error::HASHED_NAME_BLOCKLIST is empty"; exit 1; }
          printf '%s\n' "$HASHED_NAME_BLOCKLIST" > hashed.txt
          echo "hashed.txt lines: $(wc -l < hashed.txt)"

      # Use the Piper already in the repo for amd64 (no external download)
      - name: Piper smoke test (repo amd64)
        run: |
          set -euo pipefail
          BIN="third_party/piper/linux-x64/piper"
          M="third_party/piper/models/en_US-ryan-medium.onnx"
          C="third_party/piper/models/en_US-ryan-medium.onnx.json"
          if [ -x "$BIN" ] && [ -f "$M" ] && [ -f "$C" ]; then
            echo "Hello from Nova" | "$BIN" -m "$M" -c "$C" -s 0 -f /tmp/smoke_amd64.wav
            test -s /tmp/smoke_amd64.wav
            file /tmp/smoke_amd64.wav || true
            echo "Piper amd64 smoke OK"
          else
            echo "::warning::amd64 Piper/models missing; skipping smoke."
          fi

      - name: Build with PyInstaller (Linux amd64)
        run: |
          set -euo pipefail
          pyinstaller --distpath dist_linux NOVA_Linux.spec
          ls -lah dist_linux || true

      - name: Build .deb (amd64)  # <-- Debian-safe version for non-tag builds
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF:-}" =~ ^refs/tags/v ]]; then
            APPVER="${GITHUB_REF_NAME#v}"
          else
            RUN_NO="${GITHUB_RUN_NUMBER:-0}"
            SHORT_SHA="$(echo "${GITHUB_SHA:-0000000}" | cut -c1-7)"
            APPVER="0.0.0~ci.${RUN_NO}.${SHORT_SHA}"
          fi
          echo "Using APPVER=${APPVER}"
          bash pack_deb.sh "${APPVER}-1" amd64
          ls -lah dist_linux | grep -E 'amd64\.deb$' || true

      - name: Install & verify (smoke test)
        run: |
          set -euo pipefail
          sudo apt-get -yqq install ./dist_linux/*_amd64.deb
          test -f /usr/share/applications/nova.desktop
          test -f /etc/xdg/autostart/nova-tray.desktop
          echo "Linux amd64 .deb installed & basic files present."

      - name: Upload artifact (.deb amd64)
        uses: actions/upload-artifact@v4
        with:
          name: Nova-linux-amd64-${{ github.ref_name }}
          path: |
            dist_linux/*_amd64.deb
            dist_linux/nova_ai_assistant_amd64.deb
          if-no-files-found: error
          compression-level: 0

  # ==================== ARM64 (.deb) ====================
  build-arm64:
    runs-on: ubuntu-latest
    needs: build-amd64
    env:
      PIPER_REF: "v1.2.0"   # pin Piper source
    steps:
      - uses: actions/checkout@v4

      - name: Create hashed.txt from secret
        env:
          HASHED_NAME_BLOCKLIST: ${{ secrets.HASHED_NAME_BLOCKLIST }}
        run: |
          set -euo pipefail
          [ -n "${HASHED_NAME_BLOCKLIST:-}" ] || { echo "::error::HASHED_NAME_BLOCKLIST is empty"; exit 1; }
          printf '%s\n' "$HASHED_NAME_BLOCKLIST" > hashed.txt
          echo "hashed.txt lines: $(wc -l < hashed.txt)"

      - name: Build arm64 inside container
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          shell: /bin/bash
          install: |
            apt-get -qq update
            DEBIAN_FRONTEND=noninteractive apt-get -yqq install \
              build-essential python3 python3-dev python3-pip pkg-config git curl \
              libsndfile1 libsndfile1-dev \
              espeak-ng espeak-ng-data libespeak-ng1 libespeak-ng-dev \
              portaudio19-dev libportaudio2 libportaudiocpp0 \
              libasound2-dev libjack-jackd2-dev \
              ffmpeg libpulse0 desktop-file-utils python3-tk \
              cmake ninja-build
            python3 -m pip install --upgrade pip wheel
            python3 -m pip install -r requirements.linux.txt pyinstaller
          run: |
            set -euo pipefail

            # -------- Build Piper from source (arm64) ----------
            HOST_DIR="third_party/piper/linux-arm64"
            rm -rf "$HOST_DIR" && mkdir -p "$HOST_DIR"

            git clone --depth=1 --branch "${PIPER_REF}" https://github.com/rhasspy/piper.git /tmp/piper_src
            cmake -S /tmp/piper_src -B /tmp/piper_build -DCMAKE_BUILD_TYPE=Release
            cmake --build /tmp/piper_build --config Release -j

            cp -av /tmp/piper_build/piper "$HOST_DIR/piper"
            chmod +x "$HOST_DIR/piper"

            # Bundle libs/data from the build (best effort)
            find /tmp/piper_build -type f \( -name 'libpiper*.so*' -o -name 'libespeak*.so*' \) -exec cp -av {} "$HOST_DIR"/ \; || true
            if [ -d /tmp/piper_build/espeak-ng-data ]; then
              cp -a /tmp/piper_build/espeak-ng-data "$HOST_DIR"/
            elif [ -d /usr/share/espeak-ng-data ]; then
              cp -a /usr/share/espeak-ng-data "$HOST_DIR"/
            fi
            ls -la "$HOST_DIR" || true

            # -------- ARM64 Piper smoke test ----------
            BIN="$HOST_DIR/piper"
            M="third_party/piper/models/en_US-ryan-medium.onnx"
            C="third_party/piper/models/en_US-ryan-medium.onnx.json"
            if [ -x "$BIN" ] && [ -f "$M" ] && [ -f "$C" ]; then
              echo "Hello from Nova (arm64)" | "$BIN" -m "$M" -c "$C" -s 0 -f /tmp/smoke_arm64.wav
              test -s /tmp/smoke_arm64.wav
              file /tmp/smoke_arm64.wav || true
              echo "ARM64 Piper smoke OK"
            else
              echo "::warning::Models missing; skipping ARM64 smoke."
            fi

            # -------- Build Nova binaries (arm64) ----------
            pyinstaller --distpath dist_linux NOVA_Linux.spec
            ls -lah dist_linux || true

            # -------- Build .deb (arm64)  # Debian-safe version for non-tag builds ----------
            if [[ "${GITHUB_REF:-}" =~ ^refs/tags/v ]]; then
              APPVER="${GITHUB_REF_NAME#v}"
            else
              RUN_NO="${GITHUB_RUN_NUMBER:-0}"
              SHORT_SHA="$(echo "${GITHUB_SHA:-0000000}" | cut -c1-7)"
              APPVER="0.0.0~ci.${RUN_NO}.${SHORT_SHA}"
            fi
            echo "Using APPVER=${APPVER}"
            ARCH=arm64 bash pack_deb.sh "${APPVER}-1" arm64
            ls -lah dist_linux | grep -E 'arm64\.deb$' || true

      - name: Upload linux arm64 piper (raw)
        uses: actions/upload-artifact@v4
        with:
          name: piper-linux-arm64
          path: third_party/piper/linux-arm64/piper
          if-no-files-found: error
          compression-level: 0

      - name: Upload artifact (.deb arm64)
        uses: actions/upload-artifact@v4
        with:
          name: Nova-linux-arm64-${{ github.ref_name }}
          path: |
            dist_linux/*_arm64.deb
            dist_linux/nova_ai_assistant_arm64.deb
          if-no-files-found: error
          compression-level: 0

  # ==================== Release (attach both) ====================
  release:
    needs: [build-amd64, build-arm64]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: Nova-linux-*
          merge-multiple: true
          path: release_assets

      - name: List downloaded files (debug)
        run: |
          echo "::group::release_assets tree"
          ls -laR release_assets || true
          echo "::endgroup::"

      - name: Make stable copies + checksums
        run: |
          set -e
          cd release_assets
          cp -f $(find . -name '*_amd64.deb' | head -n1) nova_ai_assistant_amd64.deb
          cp -f $(find . -name '*_arm64.deb' | head -n1) nova_ai_assistant_arm64.deb
          shasum -a 256 * > SHA256SUMS.txt || true
          ls -la

      - name: Create/Update GitHub Release (attach .debs)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Nova ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            release_assets/**/*.deb
            release_assets/SHA256SUMS.txt
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
